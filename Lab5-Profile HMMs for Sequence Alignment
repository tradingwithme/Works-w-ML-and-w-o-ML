{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"},"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Profile HMMs for Sequence Alignment","metadata":{"id":"alODFtBxPqn2"}},{"cell_type":"markdown","source":"## 1. Probability of a Hidden Path Problem: Compute the probability of a hidden path.","metadata":{"id":"76hYm6PKPqn5"}},{"cell_type":"markdown","source":"Input: A hidden path π followed by the states States and transition matrix Transition of an HMM (Σ, States, Transition, Emission).\n\nOutput: The probability of this path, Pr(π).\n\nNote: You may assume that transitions from the initial state occur with equal probability.","metadata":{"id":"mKuzMaOrPqn5"}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport re","metadata":{"id":"u5uJTu2OPqn6","executionInfo":{"status":"ok","timestamp":1714786393621,"user_tz":240,"elapsed":1400,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"def hpp(text):\n    text = text.split('--------')\n    string = text[0][:-1]\n\n    matrix = pd.DataFrame(index=text[1][1:-1].split(' '),\n                          columns=text[1][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[2])]).reshape((2,2)))\n    prob = 0.5\n    for i in range(len(string)-1):\n        prob*=matrix[string[i]][string[i+1]]\n    return prob","metadata":{"id":"RzS5rIvDPqn8","executionInfo":{"status":"ok","timestamp":1714786393622,"user_tz":240,"elapsed":6,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"text = '''ABABBBAAAA\n--------\nA B\n--------\n\tA\tB\nA\t0.377\t0.623\nB\t0.26\t0.74'''","metadata":{"id":"__xDtfCyPqn9","executionInfo":{"status":"ok","timestamp":1714786394737,"user_tz":240,"elapsed":15,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"hpp(text)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hKda6U4iPqn9","executionInfo":{"status":"ok","timestamp":1714786396383,"user_tz":240,"elapsed":29,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"90094696-29fd-4089-83f2-e65a21d3ea5c"},"execution_count":4,"outputs":[{"output_type":"execute_result","execution_count":4,"data":{"text/plain":["0.0003849286917546759"]},"metadata":{}}]},{"cell_type":"markdown","source":"## 2. Probability of an Outcome Given a Hidden Path Problem: Compute the probability that an HMM will emit a string given its hidden path.","metadata":{"id":"dssNHXksPqn-"}},{"cell_type":"markdown","source":"Input: A string x, followed by the alphabet from which x was constructed, followed by a hidden path π, followed by the states States and emission matrix Emission of an HMM (Σ, States, Transition, Emission).\n\nOutput: The conditional probability Pr(x|π) that x will be emitted given that the HMM follows the hidden path π.\n\nNote: You may assume that transitions from the initial state occur with equal probability.","metadata":{"id":"DBm1-1uwPqn_"}},{"cell_type":"code","source":"def poghpp(text):\n    text = text.split('--------')\n    string = text[0][:-1]\n    matrix = pd.DataFrame(index=text[3][1:-1].split(' '),\n                          columns=text[1][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[4])]).reshape((2,3)))\n    hidden_path = text[2][1:-1]\n    probability = 1\n    for i in range(len(string)):\n        probability*=matrix[string[i]][hidden_path[i]]\n\n    return probability","metadata":{"id":"gKgskQZ1Pqn_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text = '''zzzyxyyzzx\n--------\nx y z\n--------\nBAAAAAAAAA\n--------\nA B\n--------\n\tx\ty\tz\nA\t0.176\t0.596\t0.228\nB\t0.225\t0.572\t0.203'''","metadata":{"id":"RZKw9yc3PqoA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"poghpp(text)","metadata":{"scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"U08A_ocoPqoA","executionInfo":{"status":"ok","timestamp":1711229873284,"user_tz":240,"elapsed":13,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"4e0a4376-9665-4046-f857-4f7fdc2010ff"},"execution_count":null,"outputs":[{"output_type":"execute_result","execution_count":7,"data":{"text/plain":["3.5974895474624624e-06"]},"metadata":{}}]},{"cell_type":"markdown","source":"## 3. Implement the Viterbi algorithm solving the Decoding Problem.","metadata":{"id":"Y_5sDC9mPqoB"}},{"cell_type":"markdown","source":"Input: A string x, followed by the alphabet from which x was constructed, followed by the states States, transition matrix Transition, and emission matrix Emission of an HMM (Σ, States, Transition, Emission).\n\nOutput: A path that maximizes the (unconditional) probability Pr(x, π) over all possible paths π.\n\nNote: You may assume that transitions from the initial state occur with equal probability.","metadata":{"id":"ZvP4M5cFPqoB"}},{"cell_type":"code","source":"def viterbi(text):\n    text = text.split('--------')\n    string = text[0][:-1]\n    transition = pd.DataFrame(index=text[2][1:-1].split(' '),\n                          columns=text[2][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[3])]).reshape((2,2)))\n    emission = pd.DataFrame(index=text[2][1:-1].split(' '),\n                          columns=text[1][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[4])]).reshape((2,3)))\n    path = []\n    current = None\n    for i in range(len(string)):\n        if i==0:\n            current = emission[string[0]].idxmax()\n            path.append(current)\n        else:\n            current = (transition[current]*emission[string[i]]).idxmax()\n            path.append(current)\n    return path","metadata":{"id":"WjR4rt-dPqoC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text = '''xyxzzxyxyy\n--------\nx y z\n--------\nA B\n--------\n\tA\tB\nA\t0.641\t0.359\nB\t0.729\t0.271\n--------\n\tx\ty\tz\nA\t0.117\t0.691\t0.192\nB\t0.097\t0.42\t0.483'''","metadata":{"id":"30xsY4QZPqoC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"s=viterbi(text)","metadata":{"id":"4sDTeeE6PqoC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"''.join(s)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"0XHDQ30aPqoD","executionInfo":{"status":"ok","timestamp":1711230439033,"user_tz":240,"elapsed":17,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"2e4d25ab-ad2e-4fae-ecfc-b90d3d8acd72"},"execution_count":null,"outputs":[{"output_type":"execute_result","execution_count":13,"data":{"text/plain":["'AAABBAAAAA'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{}}]},{"cell_type":"markdown","source":"## 4. Solve the Outcome Likelihood Problem.","metadata":{"id":"9OixX-0zPqoD"}},{"cell_type":"markdown","source":"Input: A string x, followed by the alphabet from which x was constructed, followed by the states States, transition matrix Transition, and emission matrix Emission of an HMM (Σ, States, Transition, Emission).\n\nOutput: The probability Pr(x) that the HMM emits x.\n\nNote: You may assume that transitions from the initial state occur with equal probability.","metadata":{"id":"dynjH5L3PqoD"}},{"cell_type":"code","source":"def outcome_probability(text):\n    text = text.split('--------')\n    string = text[0][:-1]\n    states = text[2][1:-1].split(' ')\n    transition = pd.DataFrame(index=text[2][1:-1].split(' '),\n                          columns=text[2][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[3])]).reshape((2,2)))\n    emission = pd.DataFrame(index=text[2][1:-1].split(' '),\n                          columns=text[1][1:-1].split(' '),\n                          data=np.array([float(x) for x in re.findall(\"\\d+\\.\\d+\", text[4])]).reshape((2,3)))\n    dic = {}\n    dic[0] = {}\n    for i in states:\n        dic[0][i] = {}\n        dic[0][i] = 1.0/len(states)*emission[string[0]][i]\n\n    for i in range(1,len(string)):\n        dic[i] = {}\n        for j in states:\n            dic[i][j] = 0\n            for k in states:\n                dic[i][j]+=dic[i-1][k]*transition[j][k]*emission[string[i]][j]\n    res = 0\n    for i in states:\n        res+=dic[len(string)-1][i]\n    return res","metadata":{"id":"h1rSFDuQPqoD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"text = '''xzyyzzyzyy\n--------\nx y z\n--------\nA B\n--------\n\tA\tB\nA\t0.303\t0.697\nB\t0.831\t0.169\n--------\n\tx\ty\tz\nA\t0.533\t0.065\t0.402\nB\t0.342\t0.334\t0.324'''","metadata":{"id":"BPg6bqgMPqoE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"outcome_probability(text)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZfKVtQcCPqoE","executionInfo":{"status":"ok","timestamp":1711230449614,"user_tz":240,"elapsed":338,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"03810257-d553-4668-cd37-1ea9ac63133d"},"execution_count":null,"outputs":[{"output_type":"execute_result","execution_count":16,"data":{"text/plain":["1.1005510319694851e-06"]},"metadata":{}}]}]}