{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"from warnings import filterwarnings\nfilterwarnings('ignore')\nfrom yfinance import Ticker\nimport pandas as pd #import pandas_ta as pta (or pd)\nimport numpy as np\nfrom webull import paper_webull\nfrom datetime import datetime, timedelta, time\nfrom random import randint\npwb = paper_webull()\nfrom IPython.display import display\npwb._access_token = 'dc_us_tech1.18f96bfd1a5-fca9728a5f944fd38e6e4a141397XXXX'\ntry: \n    pwb.api_login(access_token=pwb._access_token)\n    print('Am I logged on?', 'Yes.' if pwb.is_logged_in() else 'No.')\nexcept: print('Excecution is not successful')","metadata":{},"execution_count":52,"outputs":[{"name":"stdout","output_type":"stream","text":"Am I logged on? Yes.\n"}]},{"cell_type":"code","source":"import logging\nlogger = logging.getLogger('yfinance')\nlogger.disabled = True\nlogger.propagate = False","metadata":{},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"marketClose = time(20,0)\nmarketOpen = time(4,0)\nMKThourb4closing = datetime.now().time() >= time(19,0) and datetime.now().time() < marketClose\nMKThalfb4closing = datetime.now().time() >= time(19,45) and datetime.now().time() < marketClose\nactiveMKT = datetime.now().time() >= marketOpen and datetime.now().time() < marketClose\noriginalCash = 100\nusableCash = 100\nidx = {}\norderIdList = []\nprofits = []\nbpscDict = {}\nbpscH = {}\nbcspDict = {}\nbcspH = {}\nsellOff_pct = 0.015\ntsl = (1-0.0125)\ntrailingStopLoss = 0.98\ngain = 0\nloss = 0\nrealizedProfitandLoss = 0\nunrealizedProfitandLoss = 0\norderHistory = []","metadata":{},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"today = datetime.today().date()\nbusiness_days = pd.bdate_range(start=today, end=today)\nif len(business_days) > 0 and business_days[0].date() == today and pwb.is_logged_in(): \n    tradingDay = True\n    print('Today is a trading day')\nelse: \n    tradingDay = False\n    print('Today is NOT a trading day')","metadata":{},"execution_count":55,"outputs":[{"name":"stdout","output_type":"stream","text":"Today is a trading day\n"}]},{"cell_type":"code","source":"ticker_list = ['VOOV','VOO','UNG','SPY','NVDA','NKLA','TSLA','AMD','BND']\ndef getOptionChain(ticker):\n    pwb_options = pwb.get_options(ticker)\n    test = {}\n    for i in range(len(pwb_options)):\n        for key, value in pwb_options[i].items():\n            if key == 'call' or key == 'put': \n                if 'symbol' in pwb_options[i][key]:\n                    symbol = pwb_options[i][key]['symbol']\n                    test[symbol] = value\n                    value_items = list(value.items())\n                    for k, v in value_items:\n                        if isinstance(v,list):\n                            for idx in range(len(v)):\n                                for k2, v2 in v[idx].items():\n                                    test[symbol][k+k2] = v2\n                            del test[symbol][k]\n    test = pd.DataFrame(test)\n    test = test.transpose()\n    return test","metadata":{},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"def orderId_generater():\n    while True:\n        orderId = randint(100000000,200000000)\n        if not orderId in orderIdList:\n            orderIdList.append(orderId)\n        return orderId","metadata":{},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"def ocp(ticker,tickerId):\n    symbol = []\n    for i in ticker:\n        if not i.isnumeric(): symbol.append(i)\n        else: break\n    symbol = ''.join(symbol)\n    option_quote = pwb.get_option_quote(stock=symbol,optionId=tickerId)\n    return float(option_quote['data'][0]['close'])","metadata":{},"execution_count":58,"outputs":[]},{"cell_type":"code","source":"def open_an_order(y_data,w_data,symbol,ticker,tickerId,bcsp,bpsc,bidPrice=0):\n    go = False\n    if activeMKT == True:\n        orderType = 'MKT'\n        price = w_data.close[-1]\n    if activeMKT == False:\n        orderType = 'LMT'\n        price = bidPrice\n    a = any(symbol in sub_dict for sub_dict in bcspH.values())\n    b = any(symbol in sub_dict for sub_dict in bpscH.values())\n    if ((bcsp or bpsc) and ((not a and not b) or (a and not b) or (not a and b))):\n        if bcsp: temp = bcspDict\n        if bpsc: temp = bpscDict\n        C = bool('C' in symbol[len(ticker):])\n        P = bool('P' in symbol[len(ticker):])\n        if C: \n            if bcsp: BUY_or_SELL = 'BUY'\n            if bpsc: BUY_or_SELL = 'SELL'\n        if P: \n            if bcsp: BUY_or_SELL = 'SELL'\n            if bpsc: BUY_or_SELL = 'BUY'\n        if not orderType in temp: temp[orderType] = {}\n        tempDict = temp[orderType]\n        if bool(bidPrice) == False and activeMKT == False:\n            optionQuote = pwb.get_option_quote(stock=ticker,optionId=tickerId)\n            if 'bidList' in optionQuote['data'][0]: \n                bidPrice = float(optionQuote['data'][0]['bidList'][0]['price'])\n                price = bidPrice\n        if not symbol in tempDict:\n            tempDict[symbol] = {'orderIdList':[],\n                                'ticker':ticker,\n                                'orderType':orderType,\n                                'symbol':symbol,\n                                'action':BUY_or_SELL,\n                                'bidPrice':price,\n                                'shares':100,\n                                'stopLossUpdate':0,\n                                'tickerId':tickerId,\n                                'perShare':100}\n            if orderType == 'MKT': tempDict[symbol]['bufferTime'] = (datetime.now() + timedelta(seconds=3)).time()\n            tempDict[symbol]['orderIdList'].append(orderId_generater())\n            go = True\n        elif symbol in tempDict and 'tickerId' in tempDict[symbol] and tickerId == tempDict[symbol]['tickerId']:\n            tempDict[symbol]['bidPrice'] = price\n            tempDict[symbol]['shares'] += 100\n            tempDict[symbol]['perShare'] = 100\n            tempDict[symbol]['tickerId'] = tickerId\n            if orderType == 'MKT': tempDict[symbol]['bufferTime'] = (datetime.now() + timedelta(seconds=3)).time()\n            tempDict[symbol]['orderIdList'].append(orderId_generater())\n            go = True\n        if bool(go):\n            if orderType == 'MKT':\n                print(f'Placed Market Order for symbol {symbol} on {datetime.now().ctime()} '\n                      f'at close price ${price:.2f}\\n')\n            if orderType == 'LMT':\n                print(f'Placed Limit Order for symbol {symbol} on {datetime.now().ctime()} '\n                      f'at bid price ${price:.2f}\\n')","metadata":{},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"def register_to_open_orders(): \n    global usableCash, MKThourb4closing, MKThalfb4closing, activeMKT\n    MKThourb4closing = datetime.now().time() >= time(19,0) and datetime.now().time() < marketClose\n    MKThalfb4closing = datetime.now().time() >= time(19,45) and datetime.now().time() < marketClose\n    activeMKT = datetime.now().time() >= marketOpen and datetime.now().time() < marketClose\n    for a in range(1,3):\n        if a == 1: \n            temp = bcspH\n            tempDict = bcspDict\n        elif a == 2: \n            temp = bpscH\n            tempDict = bpscDict\n        orderType = list(tempDict.keys())\n        if bool(len(orderType)):\n            for i in orderType:\n                lst = list(tempDict[i].keys())\n                for symbol in lst:\n                    ticker = tempDict[i][symbol]['ticker']\n                    C = bool('C' in symbol[len(ticker):])\n                    P = bool('P' in symbol[len(ticker):])\n                    if i == 'MKT': isMKT = 'market'\n                    else: isMKT = 'limit'\n                    if C: \n                        CALL_or_PUT = 'call'\n                        if a == 1: BUY_or_SELL = 'buy'\n                        if a == 2: BUY_or_SELL = 'sell'\n                    if P: \n                        CALL_or_PUT = 'put'\n                        if a == 1: BUY_or_SELL = 'sell'\n                        if a == 2: BUY_or_SELL = 'buy'\n                    tickerId = tempDict[i][symbol]['tickerId']\n                    y_data, w_data = getOptionsData(symbol,tickerId)\n                    if len(w_data) > 1 and not 'takeAction' in tempDict[i][symbol]: \n                        price = ocp(symbol,tickerId)\n                        if usableCash >= 100*price:\n                            if i == 'MKT' and 'bufferTime' in tempDict[i][symbol]:\n                                bufferTime = tempDict[i][symbol]['bufferTime']\n                                if datetime.now().time() >= bufferTime:\n                                    del bufferTime\n                                    if 'bidPrice' in tempDict[i][symbol]: del tempDict[i][symbol]['bidPrice']\n                                    price = ocp(symbol,tickerId)\n                            elif i == 'LMT' and 'bidPrice' in tempDict[i][symbol]:\n                                if ((a == 1 and price > tempDict[i][symbol]['bidPrice']) or\n                                    (a == 2 and price < tempDict[i][symbol]['bidPrice'])): \n                                    price = ocp(symbol,tickerId)\n                                    if 'bidPrice' in tempDict[i][symbol]: del tempDict[i][symbol]['bidPrice']\n                            if not i in temp: temp[i] = {}\n                            tempH = temp[i]\n                            if not symbol in tempH: \n                                tempH[symbol] = {}\n                                tempH[symbol] = tempDict[i][symbol].copy()\n                            elif symbol in tempH:\n                                shares = tempDict[i][symbol]['shares']\n                                boughtPrice = tempH[symbol]['boughtPrice']\n                                heldShares = tempH[symbol]['shares']\n                                tempH[symbol]['boughtPrice'] = ((heldShares*boughtPrice)+(shares*price))/(shares+heldShares)\n                                tempH[symbol]['shares'] += shares\n                                if 'orderIdList' in tempH and 'orderIdList' in tempDict:\n                                    orderId1 = tempH[symbol]['orderIdList']\n                                    orderId2 = tempDict[i][symbol]['orderIdList']\n                                    c = [orderId1,orderId2]\n                                    tempH[symbol]['orderIdList'] = [ID for array in c for ID in array]\n                            if not 'boughtPrice' in tempH[symbol]: tempH[symbol]['boughtPrice'] = price\n                            if 'boughtPrice' in tempH[symbol]:\n                                tempH[symbol]['stopLoss'] = price*tsl\n                                if a == 1: tempH[symbol]['sellOffPrice'] = price*(1+(1-sellOff_pct))\n                                if a == 2: tempH[symbol]['sellOffPrice'] = price*(sellOff_pct)\n                                tempH[symbol]['baseStopLoss'] = price*trailingStopLoss\n                                print(f'Filled {isMKT} order for symbol {symbol} on {datetime.now().ctime()} with {tempDict[i][symbol][\"perShare\"]} share(s)')\n                                print(f'Filled order to {BUY_or_SELL} {CALL_or_PUT} at close price ${price:.2f}')\n                                orderHistory.append(tempH[symbol])\n                                usableCash -= 100*price\n                                if 'perShare' in tempH[symbol]: del tempH[symbol]['perShare']\n                                del tempDict[i][symbol]\n                        elif usableCash < 100*price:\n                            print(f'Could not fill {isMKT} order for symbol {symbol} '\n                                  f'to {BUY_or_SELL} {CALL_or_PUT} on {datetime.now().ctime()}')\n                            del tempDict[i][symbol]\n                        print(f'Current buying power: ${usableCash:.2f}\\n')\n                    if (symbol in tempDict[i] and 'lastingTime' in tempDict[i][symbol] and \n                        datetime.now().time() >= tempDict[i][symbol]['lastingTime']): del tempDict[i][symbol]","metadata":{},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"def close_an_order(y_data,w_data,symbol,ticker,tickerId,askPrice=0):\n    global bpscH, bcspH, bcspDict, bpscDict\n    takeAction = {}\n    a = (len(y_data) and not y_data is None)\n    MKThourb4closing = datetime.now().time() >= time(19,0) and datetime.now().time() < marketClose\n    MKThalfb4closing = datetime.now().time() >= time(19,45) and datetime.now().time() < marketClose\n    activeMKT = datetime.now().time() >= marketOpen and datetime.now().time() < marketClose\n    if activeMKT == True:\n        orderType = 'MKT'\n        price = w_data.close[-1]\n    if activeMKT == False: \n        orderType = 'LMT'\n        price = askPrice\n    for i in range(1,3):\n        if i == 1: temp = bcspH\n        elif i == 2: temp = bpscH\n        oT = list(temp.keys())\n        for orderType in oT:\n            tempH = temp[orderType]\n            if symbol in tempH:\n                ticker = tempH[symbol]['ticker']\n                C = bool('C' in symbol[len(ticker):])\n                P = bool('P' in symbol[len(ticker):])\n                if bool(askPrice) == False: \n                    ticker = temp[orderType][symbol]['ticker']\n                    tickerId = round(int(temp[orderType][symbol]['tickerId']))\n                    optionQuote = pwb.get_option_quote(stock=ticker,optionId=tickerId)\n                    if 'askList' in optionQuote['data'][0]: \n                        askPrice = float(optionQuote['data'][0]['askList'][0]['price'])\n                        price = askPrice\n                if i == 1: \n                    refPrice, comPrice = y_data['Adj Close'][-1] if (len(y_data) and not y_data is None) else np.nan, w_data.close[-1]\n                    if ocp(symbol,tickerId) >= tempH[symbol]['boughtPrice']:\n                        if comPrice >= tempH[symbol]['stopLoss'] and a: #and y_data.index[-1] > w_data.index[-1]: \n                            takeAction[2] = round(refPrice,4) <= tempH[symbol]['stopLoss']\n                            takeAction[3] = round(refPrice,4) <= tempH[symbol]['boughtPrice']\n                        takeAction[4] = round(comPrice,4) > tempH[symbol]['boughtPrice'] and MKThourb4closing\n                        takeAction[5] = w_data.close[-1] > tempH[symbol]['sellOffPrice'] and w_data.close[-2] < tempH[symbol]['sellOffPrice']\n                        takeAction[1] = round(refPrice,4) < round(comPrice,4) and activeMKT \n                        takeAction[8] = ocp(symbol,tickerId) > tempH[symbol]['boughtPrice']\n                    takeAction[6] = w_data.close[-1] > tempH[symbol]['baseStopLoss'] and w_data.close[-2] < tempH[symbol]['baseStopLoss']\n                    if (len(y_data) and not y_data is None): takeAction[6] = y_data['Adj Close'][-1] > tempH[symbol]['baseStopLoss'] and y_data['Adj Close'][-2] < tempH[symbol]['baseStopLoss']\n                if i == 2: \n                    comPrice, refPrice = y_data['Adj Close'][-1] if (len(y_data) and not y_data is None) else np.nan, w_data.close[-1]\n                    if ocp(symbol,tickerId) <= tempH[symbol]['boughtPrice']:\n                        if refPrice <= tempH[symbol]['stopLoss'] and a :#and y_data.index[-1] > w_data.index[-1]: \n                            takeAction[2] = round(comPrice,4) >= tempH[symbol]['stopLoss']\n                            takeAction[3] = round(comPrice,4) >= tempH[symbol]['boughtPrice']\n                        takeAction[4] = round(refPrice,4) < tempH[symbol]['boughtPrice'] and MKThourb4closing\n                        takeAction[5] = w_data.close[-1] < tempH[symbol]['sellOffPrice'] and w_data.close[-2] > tempH[symbol]['sellOffPrice']\n                        takeAction[1] = round(refPrice,4) < round(comPrice,4) and activeMKT \n                        takeAction[8] = ocp(symbol,tickerId) < tempH[symbol]['boughtPrice']\n                    takeAction[6] = w_data.close[-1] < tempH[symbol]['baseStopLoss'] and w_data.close[-2] > tempH[symbol]['baseStopLoss']\n                    if (len(y_data) and not y_data is None): takeAction[6] = y_data['Adj Close'][-1] < tempH[symbol]['baseStopLoss'] and y_data['Adj Close'][-2] > tempH[symbol]['baseStopLoss']\n                takeAction[7] = MKThalfb4closing\n                takeAction = pd.Series(takeAction.values(),index=takeAction.keys())\n                for a in takeAction.index:\n                    if bool(takeAction[a]):\n                        if i == 1: \n                            temp2 = bcspDict\n                            if C: \n                                CALL_or_PUT = 'CALL'\n                                BUY_or_SELL = 'SELL'\n                            if P: \n                                CALL_or_PUT = 'PUT'\n                                BUY_or_SELL = 'BUY'\n                        if i == 2: \n                            temp2 = bpscDict\n                            if C: \n                                CALL_or_PUT = 'CALL'\n                                BUY_or_SELL = 'BUY' \n                            if P: \n                                CALL_or_PUT = 'PUT'\n                                BUY_or_SELL = 'SELL'\n                        if bool(takeAction[6]) and orderType != 'LMT': orderType = 'LMT'\n                        if not orderType in temp2: temp2[orderType] = {}\n                        tempDict = temp2[orderType]\n                        if (not symbol in tempDict or \n                            (symbol in tempDict and orderType == 'LMT' and 'placedTime' in tempDict[symbol] and\n                             tempDict[symbol]['lastingTime'] < w_data.index[-1].time())) :\n                            tempDict[symbol] = {}\n                            tempDict[symbol] = tempH[symbol].copy()\n                            #if 'orderIdList' in tempDict[symbol]: del tempDict[symbol]['orderIdList']\n                            tempDict[symbol]['orderIdList'] = []\n                            tempDict[symbol]['orderType'] = orderType\n                            tempDict[symbol]['action'] = BUY_or_SELL\n                            tempDict[symbol]['CALL_or_PUT'] = CALL_or_PUT\n                            tempDict[symbol]['askPrice'] = price\n                            tempDict[symbol]['tickerId'] = tickerId\n                            tempDict[symbol]['lastingTime'] = (datetime.now() + timedelta(minutes=5)).time()\n                            tempDict[symbol]['placedTime'] = pd.to_datetime(datetime.now()).tz_localize(w_data.index[-1].tz)\n                            if bool(takeAction[6]): tempDict[symbol]['shares'] = 1\n                            tempDict[symbol]['takeAction'] = a\n                            if orderType == 'MKT' or (6 in takeAction.index and takeAction[6] == False): \n                                say = 'Market'\n                                tempDict[symbol]['bufferTime'] = (datetime.now() + timedelta(seconds=3)).time()\n                            if orderType == 'LMT':\n                                say = 'Limit'\n                                #tempDict[symbol]['askTime'] = pd.to_datetime(datetime.now()).tz_localize(wd.index[-1].tz)\n                            if 'orderIdList' in tempDict[symbol]: tempDict[symbol]['orderIdList'].append(orderId_generater())\n                            print(f'Placed a {say} order for symbol {symbol} on {datetime.now().ctime()} '\n                                  f'to {BUY_or_SELL} with {tempDict[symbol][\"shares\"]} share(s)\\n')\n                        break                           ","metadata":{},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"def register_to_close_orders():\n    global usableCash, gain, loss, bcspH, bpscH\n    tempH = None\n    tempDict = None\n    for i in range(1,3):\n        if i == 1: \n            under = 'under'\n            temp = bcspDict\n            temp2 = bcspH\n            tradeUp = True\n        elif i == 2: \n            under = 'above'\n            temp = bpscDict\n            temp2 = bpscH\n            tradeUp = False\n        oT = list(temp.keys())\n        for orderType in oT:\n            tempDict = temp[orderType]\n            if orderType == 'MKT': say = 'market'\n            else: say = 'limit'\n            if orderType in temp2: tempH = temp2[orderType]\n            lst = list(tempDict.keys())\n            if tempH != None and tempDict != None:\n                for symbol in lst:\n                    ticker = tempDict[symbol]['ticker']\n                    C = bool('C' in symbol[len(ticker):])\n                    P = bool('P' in symbol[len(ticker):])\n                    if i == 'MKT': isMKT = 'market'\n                    else: isMKT = 'limit'\n                    if C: \n                        CALL_or_PUT = 'call'\n                        if i == 1: BUY_or_SELL = 'sell'\n                        if i == 2: BUY_or_SELL = 'buy'\n                    if P: \n                        CALL_or_PUT = 'put'\n                        if i == 1: BUY_or_SELL = 'buy'\n                        if i == 2: BUY_or_SELL = 'sell'\n                    tickerId = round(int(tempDict[symbol]['tickerId']))\n                    tradeOut = False\n                    y_data, w_data = getOptionsData(symbol,tickerId) \n                    if len(w_data) > 1 and symbol in tempH:\n                        if orderType == 'LMT' and 'askPrice' in tempDict[symbol] and w_data.index[-1] > tempDict[symbol]['placedTime']:\n                            if (tradeUp == True and \n                                ((tempDict[symbol]['askPrice'] > ocp(symbol,tickerId) and tempDict[symbol]['askPrice'] < w_data.close[-2]) or \n                                 (tempDict[symbol]['askPrice'] > ocp(symbol,tickerId) and tempDict[symbol]['askPrice'] >= w_data.close[-2]))):\n                                tradeOut = True\n                            elif (tradeUp == False and \n                                ((tempDict[symbol]['askPrice'] < ocp(symbol,tickerId) and tempDict[symbol]['askPrice'] > w_data.close[-2]) or \n                                 (tempDict[symbol]['askPrice'] < ocp(symbol,tickerId) and tempDict[symbol]['askPrice'] <= w_data.close[-2]))):\n                                tradeOut = True\n                        if orderType == 'MKT' and 'bufferTime' in tempDict[symbol]:\n                            bufferTime = tempDict[symbol]['bufferTime']\n                            if datetime.now().time() >= bufferTime: tradeOut = True\n                        if tradeOut == True and 'takeAction' in tempDict[symbol]:\n                            print(f'Filled a {say} order for symbol {symbol} on {datetime.now().ctime()} '\n                                  f'to {BUY_or_SELL} with {tempDict[symbol][\"shares\"]} share(s)')\n                            if tempDict[symbol]['takeAction'] == 1: print(f\"Yahoo's close price traded {under} Webull's close price\")\n                            elif tempDict[symbol]['takeAction'] == 2: print(f'Traded {under} stop loss at ${tempDict[symbol][\"stopLoss\"]:.2f}')\n                            elif tempDict[symbol]['takeAction'] == 3: print(f\"Yahoo's close price went {under} position's close price at ${tempDict[symbol]['sellOffPrice']:.2f}\")\n                            elif tempDict[symbol]['takeAction'] == 4: print(f'Traded {under} with the hour before closing')\n                            elif tempDict[symbol]['takeAction'] == 5: print(f'Traded {under} take-profit price at ${tempDict[symbol][\"sellOffPrice\"]:.2f}')\n                            elif tempDict[symbol]['takeAction'] == 6: print(f'Traded {under} fixed stop-loss price at ${tempDict[symbol][\"boughtPrice\"]:.2f}')\n                            elif tempDict[symbol]['takeAction'] == 7: print(f'Traded {under} around closing')\n                            elif tempDict[symbol]['takeAction'] == 8: print(f'Traded {under} to take profits at ${ocp(symbol,tickerId):.2f}')\n                            if i == 1: sellingValue = ocp(symbol,tickerId) - tempH[symbol][\"boughtPrice\"]\n                            if i == 2: sellingValue = tempH[symbol][\"boughtPrice\"] - ocp(symbol,tickerId)\n                            profit = tempDict[symbol][\"shares\"]*sellingValue\n                            #if profit < -tempDict[symbol][\"shares\"]*tempH[symbol][\"boughtPrice\"]: profit = -tempDict[symbol][\"shares\"]*tempH[symbol][\"boughtPrice\"]\n                            profits.append(profit)\n                            usableCash += (tempDict[symbol][\"shares\"]*tempH[symbol][\"boughtPrice\"]) + profit\n                            if profit >= 0: \n                                gain += profit\n                                print(f'Profitted: ${profit:.2f}')\n                            else: \n                                loss += profit\n                                print(f'Loss: -${abs(profit):.2f}')\n                            print(f'Current buying power: ${usableCash:.2f}\\n')\n                            tempH[symbol][\"shares\"] = tempH[symbol][\"shares\"]-tempDict[symbol][\"shares\"]\n                            tempH[symbol][\"profit\"] = profit\n                            orderHistory.append(tempH[symbol])\n                            del tempDict[symbol]\n                            if tempH[symbol][\"shares\"] <= 0: del tempH[symbol]\n                    else: del tempDict[symbol]","metadata":{},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"def standby_updating():\n    global bpscH, bcspH, bcspDict, bpscDict, marketOpen, marketClose\n    for i in range(1,3):\n        if i == 1: temp = bcspH\n        elif i == 2: temp = bpscH\n        oT = list(temp.keys())\n        for orderType in oT:\n            tempH = temp[orderType]\n            lst = list(tempH.keys())\n            for symbol in lst:\n                tickerId = round(int(tempH[symbol]['tickerId']))\n                y_data, w_data = getOptionsData(symbol,tickerId)\n                if len(w_data) > 1:\n                    if i == 1: #and tempH[symbol]['stopLossUpdate'] < 1: \n                        tempH[symbol]['unrealizedProfitLoss'] = tempH[symbol]['shares']*(w_data.close[-1]-tempH[symbol]['boughtPrice'])\n                        if (w_data.open[-1]*(tsl) > tempH[symbol]['stopLoss'] and\n                            tempH[symbol]['unrealizedProfitLoss'] > 0 and\n                            w_data.open[-1]*(tsl) > tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.open[-1]*(tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                        elif (w_data.close[-1]*(tsl) > tempH[symbol]['stopLoss'] and\n                              tempH[symbol]['unrealizedProfitLoss'] > 0 and\n                              w_data.close[-1]*(tsl) > tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.close[-1]*(tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                        elif (w_data.high[-1]*(tsl) > tempH[symbol]['stopLoss'] and\n                              tempH[symbol]['unrealizedProfitLoss'] > 0 and\n                              w_data.high[-1]*(tsl) > tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.high[-1]*(tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                    if i == 2: #and tempH[symbol]['stopLossUpdate'] < 1: \n                        tempH[symbol]['unrealizedProfitLoss'] = tempH[symbol]['shares']*(tempH[symbol]['boughtPrice']-w_data.close[-1])\n                        if (w_data.open[-1]*(1+1-tsl) < tempH[symbol]['stopLoss'] and\n                            tempH[symbol]['unrealizedProfitLoss'] > 0 and \n                            w_data.open[-1]*(1+1-tsl) < tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.open[-1]*(1+1-tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                        elif (w_data.close[-1]*(1+1-tsl) < tempH[symbol]['stopLoss'] and\n                              tempH[symbol]['unrealizedProfitLoss'] > 0 and \n                              w_data.close[-1]*(1+1-tsl) < tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.close[-1]*(1+1-tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                        elif (w_data.high[-1]*(1+1-tsl) < tempH[symbol]['stopLoss'] and\n                              tempH[symbol]['unrealizedProfitLoss'] > 0 and\n                              w_data.high[-1]*(1+1-tsl) < tempH[symbol]['boughtPrice']):\n                            tempH[symbol]['stopLoss'] = w_data.high[-1]*(1+1-tsl)\n                            tempH[symbol]['stopLossUpdate'] += 1\n                    close_an_order(y_data,w_data,symbol,ticker,tickerId)","metadata":{},"execution_count":63,"outputs":[]},{"cell_type":"raw","source":"def print_order_summary():\n    if len(bpscH) > 0 or len(bcspH) > 0:\n        merged_list = []\n        merged_dict = {}\n        merged_dict = bpscH.copy()\n        merged_dict.update(bcspH.copy())\n        orderType_list = list(merged_dict.keys())\n        for i in orderType_list:\n            symbol_list = list(merged_dict[i].keys())\n            for symbol in symbol_list:\n                if 'orderIdList' in merged_dict[i][symbol]: del merged_dict[i][symbol]['orderIdList']\n                merged_list.append(merged_dict[i][symbol])\n        if bool(len(merged_list)): \n            print('Active Orders:')\n            display(pd.DataFrame(merged_list))\n        print(f'Current buying power: ${usableCash:.2f}')\n        print(f'Current Market Value: ${(originalCash+gain+loss):.2f}\\n')\n    if bool(len(bpscDict) or len(bcspDict)):\n        merged_list = []\n        merged_dict = bpscDict.copy()\n        merged_dict.update(bcspDict.copy())\n        orderType_list = list(merged_dict.keys())\n        for i in orderType_list:\n            symbol_list = list(merged_dict[i].keys())\n            for symbol in symbol_list:\n                if 'orderIdList' in merged_dict[i][symbol]: del merged_dict[i][symbol]['orderIdList']\n                merged_list.append(merged_dict[i][symbol])\n        if bool(len(merged_list)): \n            print('Pending Orders:')\n            display(pd.DataFrame(merged_list))\n        print(f'Current buying power: ${usableCash:.2f}')\n        print(f'Current Market Value: ${(originalCash+gain+loss):.2f}\\n')","metadata":{}},{"cell_type":"code","source":"def print_order_summary():\n    merged_dict = [bcspH,bpscH,bcspDict,bpscDict]\n    dataframe = pd.DataFrame()\n    for i in range(len(merged_dict)): \n        if len(merged_dict[i]): \n            for a in merged_dict[i]: dataframe=pd.concat([dataframe,pd.DataFrame.from_dict(merged_dict[i][a],orient='index')])\n    if len(dataframe): \n        display(dataframe)\n        print(f'Current buying power: ${usableCash:.2f}')\n        print(f'Current Market Value: ${(originalCash+gain+loss):.2f}\\n')","metadata":{},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"def getOptionsData(ticker,tickerId):\n    y_data = pd.DataFrame()\n    w_data = pd.DataFrame()\n    y_data = Ticker(ticker).history(interval='1m',prepost=True) \n    if (len(y_data) and not y_data is None): y_data.rename(columns={'Close':'Adj Close'},inplace=True)\n    w_data = pwb.get_options_bars(tickerId,count=2,timeStamp=0)\n    return y_data, w_data","metadata":{},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"global marketClose, marketOpen, MKThourb4closing, activeMKT, usableCash, ticker_list\nglobal sellOff_pct, tsl, trailingStopLoss, gain, loss, realizedProfitandLoss, orderHistory, orderIdList\nglobal bpscDict, bpscH, MKThalfb4closing, profits, bcspH, bcspDict\ndef checkCondition(): return all(not bcspH[key] for key in bcspH) and all(not bpscH[key] for key in bpscH)\nwhile tradingDay:\n    if datetime.now().time() < time(20,0) and datetime.now().time() > marketOpen:\n        lst = list(ticker_list)\n        for ticker in lst: \n            if (checkCondition() and datetime.now().time() >= time(19,0)) or datetime.now().time() >= time(19,59): break\n            register_to_open_orders()\n            register_to_close_orders()\n            standby_updating()\n            optionChainData = pd.DataFrame()\n            #if not (datetime.now().time() >= time(15,0) and datetime.now().time() < time(16,0)): optionChainData = getOptionChain(ticker)\n            if datetime.now().time() < time(19,45) and checkCondition(): optionChainData = getOptionChain(ticker)\n            if len(optionChainData) and checkCondition():\n                for i in range(len(optionChainData)):\n                    #checkCondition = all(not bcspH[key] for key in bcspH) and all(not bpscH[key] for key in bpscH)\n                    if datetime.now().time() >= time(19,59): break\n                    register_to_open_orders()\n                    register_to_close_orders()\n                    standby_updating()\n                    symbol = optionChainData.index[i]\n                    if optionChainData.tickerId.notna()[i] and checkCondition():\n                        tickerId = round(optionChainData.tickerId[i])\n                        y_data, w_data = getOptionsData(symbol,tickerId)\n                        if len(w_data) > 0 and len(y_data) > 0:#bool(len(y_data) and len(w_data)):\n                            if ticker in symbol:\n                                MKThalfb4closing = datetime.now().time() >= time(19,45) and datetime.now().time() < marketClose\n                                if not symbol in idx: idx[symbol] = {'updated':True,\n                                                                     'wlastTime':w_data.index[-1].time(),\n                                                                     'ylastTime':w_data.index[-1].time()}\n                                elif symbol in idx and idx[symbol]['updated'] == False:\n                                    if w_data.index[-1].time() > idx[symbol]['wlastTime']: idx[symbol]['wlastTime'] = w_data.index[-1].time()\n                                    if y_data.index[-1].time() > idx[symbol]['ylastTime']: idx[symbol]['ylastTime'] = y_data.index[-1].time()\n                                    idx[symbol]['updated'] = True\n                                if ((symbol in idx and idx[symbol]['updated'] == True) or MKThalfb4closing):\n                                    buyCallSellPuts = False\n                                    buyPutSellCalls = False\n                                    if ('askListprice' in optionChainData.columns and \n                                        optionChainData.askListprice.notna()[i] and\n                                        not MKThalfb4closing): \n                                        askPrice = float(optionChainData.askListprice[i])\n                                    else: askPrice = w_data.close[-1]\n                                    if ('bidListprice' in optionChainData.columns and \n                                        optionChainData.bidListprice.notna()[i] and\n                                        not MKThalfb4closing):\n                                        bidPrice = float(optionChainData.bidListprice[i])\n                                    else: bidPrice = w_data.close[-1]\n                                    if usableCash >= 100*w_data.close[-1]: #and w_data.close[-1] >= 0.03: and y_data.index[-1] > w_data.index[-1]:\n                                        if round(y_data['Adj Close'][-1],4) > round(w_data.close[-1],4) and y_data['Adj Close'][-1]>ocp(symbol,tickerId): buyCallSellPuts = True\n                                        if round(y_data['Adj Close'][-1],4) < round(w_data.close[-1],4) and y_data['Adj Close'][-1]<ocp(symbol,tickerId): buyPutSellCalls = True\n                                    if (buyCallSellPuts or buyPutSellCalls) and datetime.now().time() < time(19,0): \n                                        open_an_order(y_data,w_data,symbol,ticker,tickerId,buyCallSellPuts,buyPutSellCalls)\n                                    close_an_order(y_data,w_data,symbol,ticker,tickerId,askPrice)\n                                    idx[symbol]['updated'] == False\n            print_order_summary()\n    if (checkCondition() and datetime.now().time() >= time(19,0)) or datetime.now().time() >= time(19,59): break\nfor i in range(1,3):\n    if i == 1: temp = bcspH\n    if i == 2: temp = bpscH\n    order_lst = list(temp.keys())\n    for o in order_lst:\n        tempH = temp[o]\n        symbol_lst = list(tempH.keys())\n        for symbol in symbol_lst:   \n            profit = tempH[symbol]['unrealizedProfitLoss']\n            if profit > 0: gain += profit\n            else: loss += profit\n            profits.append(profit)\nprint(f'\\nOriginal Buying Power: ${originalCash:.2f}'\n      f'\\nCurrent Buying Power: ${usableCash:.2f}'\n      f'\\nCurrent Market Value: ${(originalCash+gain+loss):.2f}'\n      f'\\nProfits gained: ${gain:.2f}')\ntotal_profits = gain + loss\nif loss < 0: (f'Profits lossed: -${abs(loss):.2f}')\nif total_profits > 0: print(f\"Day's Profit and Loss: ${(gain+loss):.2f}\")\nif total_profits < 0: print(f\"Day's Profit and Loss: -${(gain+loss):.2f}\")\noH = orderHistory\nfor i in range(len(oH)): \n    if 'orderIdList' in oH[i]: del oH[i]['orderIdList']\noH = pd.DataFrame(oH)\ndisplay(oH)\nprofits = np.array(profits)\nprint('Gains:',profits[profits > 0])\nprint('Losses:',profits[profits < 0])","metadata":{},"execution_count":66,"outputs":[{"name":"stdout","output_type":"stream","text":"\n\nOriginal Buying Power: $100.00\n\nCurrent Buying Power: $100.00\n\nCurrent Market Value: $100.00\n\nProfits gained: $0.00\n"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Empty DataFrame\n","Columns: []\n","Index: []"]},"metadata":{}},{"name":"stdout","output_type":"stream","text":"Gains: []\n\nLosses: []\n"}]},{"cell_type":"raw","source":"for i in range(1,3):\n    if i == 1: temp = bcspH\n    if i == 2: temp = bpscH\n    order_lst = list(temp.keys())\n    for o in order_lst:\n        tempH = temp[o]\n        symbol_lst = list(tempH.keys())\n        for symbol in symbol_lst:   \n            profit = tempH[symbol]['unrealizedProfitLoss']\n            if profit > 0: gain += profit\n            else: loss += profit\n            profits.append(profit)\nprint(f'\\nOriginal Buying Power: ${originalCash:.2f}'\n      f'\\nCurrent Buying Power: ${usableCash:.2f}'\n      f'\\nCurrent Market Value: ${(originalCash+gain+loss):.2f}'\n      f'\\nProfits gained: ${gain:.2f}')\ntotal_profits = gain + loss\nif loss < 0: (f'Profits lossed: -${abs(loss):.2f}')\nif total_profits > 0: print(f\"Day's Profit and Loss: ${(gain+loss):.2f}\")\nif total_profits < 0: print(f\"Day's Profit and Loss: -${(gain+loss):.2f}\")\noH = orderHistory\nfor i in range(len(oH)): \n    if 'orderIdList' in oH[i]: del oH[i]['orderIdList']\noH = pd.DataFrame(oH)\ndisplay(oH)\nprofits = np.array(profits)\nprint('Gains:',profits[profits > 0])\nprint('Losses:',profits[profits < 0])","metadata":{}}]}