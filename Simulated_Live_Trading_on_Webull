{"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"from warnings import filterwarnings\nfilterwarnings('ignore')\nfrom webull import paper_webull # for real money trading, just import 'webull' instead\nfrom yfinance import download, Ticker\nimport pandas as pd\nimport numpy as np\nimport ta\nimport pandas_ta as pta\nfrom datetime import datetime, timedelta, time\nimport time as t\nfrom random import randrange\nglobal market_close, market_open, current_time, orderHistory, Positions, timezone\nimport pandas_market_calendars as mcal\npwb = paper_webull() \nfrom tzlocal import get_localzone\nfrom IPython.display import display\nimport pytz\n\ntimeframe = '1'\nperiod = '5'\ntimezone = pd.Timestamp.now(tz=get_localzone()).tz\ntoday = (pd.Timestamp.now(tz=get_localzone()).floor('1D')).replace(tzinfo=None)\nnyse = mcal.get_calendar('NASDAQ')#('NYSE')\nschedule = nyse.schedule(start_date=today - pd.DateOffset(days=5), end_date=today + pd.DateOffset(days=5))\nholdings = {}\nmarket_close = time(20, 0)\nmarket_open = time(4,0)\ntotal_profit = 0\nsuccessful_trades = 0\ntotal_trades = 0\noriginalBuyingPower = buying_power = 100#536.44 \nprofit = 0\ntotal_real_profit = 0\ntotal_paper_profit = 0\nlast_index = {}\nselling = {}\norderHistory = list()\nPositions = list()\nmade_profit = 0\ntrend = 0\nh = {}\norderId = []\ntempH = {}\ntrades = 0","metadata":{},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"import logging\nlogger = logging.getLogger('yfinance')\nlogger.disabled = True\nlogger.propagate = False","metadata":{},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def gcp(stock): return float(pwb.get_quote(stock)['close'])\ndef gop(stock): return float(pwb.get_quote(stock)['open'])\ndef ghp(stock): return float(pwb.get_quote(stock)['high'])\ndef gpcp(stock): return float(pwb.get_quote(stock)['preClose'])\ndef MKT(index=None):\n    if index is None: return datetime.now().time() >= time(9,30) and datetime.now().time() <= time(15,59)\n    else: return index >= time(9,30) and index <= time(15,59)\ndef LMT(index=None):\n    if index is None: return datetime.now().time() < time(9,30) or datetime.now().time() > time(15,59)\n    else: return index < time(9,30) or index > time(15,59)\ndef getYahooData(stock): \n    a = pta.yf(ticker=stock,interval='1m',prepost=True)\n    if not a is None and len(a): return a.iloc[-2:]\n    else: \n        a = Ticker(stock).history(interval='1m',prepost=True)\n        if not a is None and len(a): return a.iloc[-2:]\n        else:\n            a = download(stock,interval='1m',progress=False,period='max',prepost=True)\n            if not a is None and len(a): return a.iloc[-2:]\n            else: return pwb.get_bars(stock = stock, interval = 'm1', count = 2, extendTrading = 1)\ndef isBeforeClosing(): return (datetime.now().time()>=time(15,0) and datetime.now().time()<time(16,0)) or datetime.now().time()>=time(19,0)","metadata":{},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def convert_to_ctime(timestamp):\n    return timestamp.to_pydatetime().ctime()\n\ndef date_format_correction(ctime):\n    dt = datetime.strptime(ctime, '%a %b %d %H:%M:%S %Y')\n    dt_formatted = dt\n    return dt_formatted\n\ndef getOrderId(orderId):\n    while True:\n        randomize = randrange(start = 0, stop = 9999999)\n        if not randomize in orderId:\n            break\n    return randomize","metadata":{},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def updateToMKTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit):\n    if len(tempH) > 0:\n        lista = list(tempH.keys())\n        for j in range(len(lista)):\n            stock = lista[j]\n            if (str('bufferTime') in tempH[stock] and\n                stock in h and\n                datetime.now().time() >= tempH[stock]['bufferTime'] and\n                tempH[stock]['action'] == 'MKT' and\n                tempH[stock]['BUY or SELL'] == 'SELL'):\n                \n                tempH[stock]['stock'] = stock\n                \n                print(f'Placed Market Sell Order of {tempH[stock][\"shares\"]} shares of {stock} at ${(gcp(stock)):.2f}',\n                      f'\\non {datetime.now().ctime()}, previously bought at ${h[stock][\"price\"]:.2f} on {h[stock][\"last_index\"].ctime()}')   \n                \n                #tempH[stock]['selling_value'] = tempH[stock]['shares']*cpd.close[-1]\n                selling_value = tempH[stock]['shares']*gcp(stock)\n                profit = selling_value - (tempH[stock]['shares']*h[stock]['price'])\n\n                total_real_profit += profit\n                if profit > 0:\n                    made_profit += profit\n                print('Profit(s):',f'${profit:.2f}')\n                buying_power += (selling_value+profit)\n                print(f'Current buying power is ${buying_power:.2f}')\n                \n                if tempH[stock]['takeAction'] == 2:\n                    print('Stop Loss Triggered')\n                elif tempH[stock]['takeAction'] == 3:\n                    print('Sold near closing')\n                elif tempH[stock]['takeAction'] == 4:\n                    print('Sold at closing')\n                \n                for key in h[stock].keys():\n                    if str('condition ') in str(key):\n                        if h[stock][key] != 'sell':\n                            print(f'Previously bought under {key}')\n                        elif h[stock][key] == 'sell':\n                            print(f'Sold under {key}')\n                print('\\n')\n                temp = {}\n                temp[stock] = tempH[stock].copy()\n                orderHistory.append(temp.copy())\n                del h[stock]\n                del tempH[stock]\n    return h, tempH, buying_power, total_real_profit, profit, made_profit","metadata":{"tags":[]},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def updateToLMTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit):\n    if len(tempH) > 0:\n        lista = list(tempH.keys())\n        for j in range(len(lista)):\n            stock = lista[j]\n            #cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 2, extendTrading = 1)\n            #if len(cpd) > 0:\n            if len(orderHistory) > 0:\n                for i in range(len(orderHistory)):\n                    if (stock == orderHistory[i] and\n                        stock in h and\n                        str('orderId') in orderHistory[i][stock] and\n                        tempH[stock]['orderId'] == orderHistory[i][stock]['orderId'] and\n                        tempH[stock]['action'] == 'LMT' and\n                        tempH[stock]['BUY or SELL'] == 'SELL'):\n                        if str('sellPrice') in orderHistory[i][stock] and gcp(stock) > orderHistory[i][stock]['sellPrice']:\n                            tempH[stock]['stock'] = stock\n                \n                            print(f'Placed Limit Sell Order of {orderHistory[i][stock][\"shares\"]} shares of {stock} at ${(datetime.now().ctime()):.2f}',\n                                  f'\\non {orderHistory[i][stock][\"time\"].ctime()}, previously bought at ${h[stock][\"price\"]:.2f} on {h[stock][\"last_index\"].ctime()}')   \n\n                            selling_value = orderHistory[i][stock]['shares']*gcp(stock)\n                            profit = selling_value - (orderHistory[i][stock]['shares']*orderHistory[i][stock]['price'])\n\n                            total_real_profit += profit\n                            if profit > 0:\n                                made_profit += profit\n                            print('Profit(s):',f'${profit:.2f}')\n                            buying_power += (selling_value+profit)\n                            print(f'Current buying power is ${buying_power:.2f}')\n\n                            if tempH[stock]['takeAction'] == 2:\n                                print('Stop Loss Triggered')\n                            elif tempH[stock]['takeAction'] == 3:\n                                print('Sold near closing')\n                            elif tempH[stock]['takeAction'] == 4:\n                                print('Sold at closing')\n\n                            for key in h[stock].keys():\n                                if str('condition ') in str(key):\n                                    if h[stock][key] != 'sell':\n                                        print(f'Previously bought under {key}')\n                                    elif h[stock][key] == 'sell':\n                                        print(f'Sold under {key}')\n                            print('\\n')\n                            temp = {}\n                            temp[stock] = tempH[stock].copy()\n                            orderHistory.append(temp.copy())\n                            del h[stock]\n                            del tempH[stock]\n    \n    return h, tempH, buying_power, total_real_profit, profit, made_profit","metadata":{},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"def updatePosition(tempH, tickerList, buying_power):\n    position = {}\n    if len(tempH) > 0:\n        lista = list(tempH.keys())\n        for j in range(len(lista)):\n            stock = lista[j]\n            if MKT(tempH[stock]['index']) and LMT(): del tempH[stock]\n            #cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 2, extendTrading = 1)\n            #if len(cpd) > 0:\n            #if stock in tempH and 'askPrice' in tempH[stock]: \n            #    print(f\"askPrice : {tempH[stock]['askPrice']:.2f}\")\n            #    print(f\"currentPrice: ${gcp(stock)]:.2f}\")\n            if (stock in tempH and\n                tempH[stock]['action'] == 'LMT' and \n                tempH[stock]['BUY or SELL'] == 'BUY' and \n                'bidPrice' in tempH[stock] and \n                gcp(stock) > tempH[stock]['bidPrice']):\n                if buying_power >= tempH[stock]['shares']*gcp(stock):\n                    position[stock] = tempH[stock].copy()\n                    del position[stock]['bidPrice']\n                    position[stock]['boughtPrice'] = gcp(stock)\n                    position[stock]['time'] = datetime.now()#.replace(tzinfo=timezone)\n                    Positions.append(position.copy())\n                    orderHistory.append(position.copy())\n                    del position[stock]\n                else: \n                    shares=tempH[stock]['shares']\n                    print(f'Not enough to fill {shares} share(s) at close price ${gcp(stock):.2f} '\n                          f'on {datetime.now().ctime()} for stock {stock}\\n')\n                    print(\"Current Buying Power: $%.2f\"%buying_power)\n                    del tempH[stock]\n            for i in range(len(Positions)):\n                if (stock in tempH and\n                    stock in Positions[i] and \n                    Positions[i][stock]['orderId'] == tempH[stock]['orderId'] and \n                    Positions[i][stock]['action'] == 'LMT' and\n                    Positions[i][stock]['BUY or SELL'] == 'BUY' and \n                    'boughtPrice' in Positions[i][stock]):\n                    if not stock in h:\n                        tempH[stock]['price'] = gcp(stock)\n                    elif stock in h:\n                        tempH[stock]['price'] = ((tempH[stock]['perShare']*gcp(stock))+(h[stock]['shares']*h[stock]['price']))/(tempH[stock]['perShare']+h[stock]['shares'])\n                        tempH[stock]['shares']+=h[stock]['shares']\n                    tickerList.remove(stock)\n                    tickerList.insert(0,stock)\n                    h[stock] = tempH[stock].copy()\n                    h[stock]['last_index'] = datetime.now()#.replace(tzinfo=timezone)\n                    h[stock]['stop loss'] = h[stock]['price']*(1-trailingstoploss)\n                    h[stock]['unrealizedProfitLoss'] = h[stock]['shares']*(gcp(stock)-h[stock]['price'])\n                    buying_power -= (h[stock]['perShare']*h[stock]['price'])\n                    print(f'Filled Limit Order at price {gcp(stock)} '\n                          f'on {datetime.now().ctime()} for stock {stock} '\n                          f'with {tempH[stock][\"perShare\"]} share(s).')\n                    print(f'Current buying power is ${buying_power:.2f}\\n')\n                    del tempH[stock] \n                    break\n            if (stock in tempH and\n                tempH[stock]['action'] == 'LMT' and\n                tempH[stock]['BUY or SELL'] == 'SELL' and \n                'askPrice' in tempH[stock] and \n                gcp(stock) > tempH[stock]['askPrice']):\n                position[stock] = tempH[stock].copy()\n                del position[stock]['askPrice']\n                position[stock]['sellPrice'] = gcp(stock)\n                position[stock]['time'] = datetime.now()#.replace(tzinfo=timezone)\n                del Positions[i][stock]\n                orderHistory.append(position.copy())\n                break\n    return tempH, buying_power, tickerList","metadata":{},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"def order_parser(stock, tempH):\n    true = True\n    if stock in tempH:\n        true = False\n    return true\ndef updateToHoldings(tempH,tickerList,h,buying_power,trailingstoploss):\n    if len(tempH) > 0:\n        lista = list(tempH.keys())\n        for stock in lista:\n            if LMT(tempH[stock]['index']) and MKT(): del tempH[stock]\n            #cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 2, extendTrading = 1)\n            #if len(cpd) > 0:\n                #cpd.index = cpd.index.map((convert_to_ctime))\n            if (stock in tempH and\n                str('bufferTime') in tempH[stock] and \n                datetime.now().time() >= tempH[stock]['bufferTime'] and\n                tempH[stock]['action'] == 'MKT' and\n                tempH[stock]['BUY or SELL'] == 'BUY'):\n                if buying_power >= tempH[stock]['perShare']*gcp(stock) and buying_power>=0:\n                    if not stock in h: tempH[stock]['price'] = gcp(stock)\n                    elif stock in h:\n                        tempH[stock]['price'] = ((tempH[stock]['perShare']*gcp(stock))+(tempH[stock]['shares']*tempH[stock]['price']))/(tempH[stock]['perShare']+tempH[stock]['shares'])\n                    tickerList.remove(stock)\n                    tickerList.insert(0,stock)\n                    h[stock] = tempH[stock].copy()\n                    del h[stock]['bufferTime']\n                    h[stock]['last_index'] = datetime.now()#.replace(tzinfo=timezone)\n                    h[stock]['stop loss'] = h[stock]['price']*(1-trailingstoploss)\n                    h[stock]['unrealizedProfitLoss'] = h[stock]['shares']*(gcp(stock)-h[stock]['price'])\n                    buying_power -= (h[stock]['perShare']*gcp(stock))\n                    print(f'Filled Market Order at price {gcp(stock)} '\n                          f'on {datetime.now().ctime()} for stock {stock} '\n                          f'with {h[stock][\"perShare\"]} share(s).')\n                    temp = {}\n                    temp[stock] = tempH[stock].copy()\n                    orderHistory.append(temp.copy())\n                else: print(f\"Could not fill market position for stock {stock} \"\n                            f\"with {tempH[stock]['perShare']} share(s).\")\n                print(f'Current buying power is ${buying_power:.2f}\\n')\n                del tempH[stock] \n    if len(h) > 0:\n        lista = h.keys()\n        for stock in lista:\n            #cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 2,extendTrading=1)\n            #ydf=Ticker(stock).history(interval='1m', prepost=True,start=cpd.index[-1].strftime('%Y-%m-%d'))\n            h[stock][\"Webull's lastPrice\"] = gcp(stock)\n            h[stock][\"Webull's Time Index\"] = datetime.now().ctime()\n            h[stock][\"Yahoo's lastPrice\"] = getYahooData(stock).Close[-1]\n            h[stock][\"Yahoo's Time Index\"] = getYahooData(stock).index[-1].ctime()\n            if (str('unrealizedProfitLoss') in h[stock] and \n                h[stock]['unrealizedProfitLoss'] != h[stock]['shares']*(gcp(stock)-h[stock]['price'])):\n                h[stock]['unrealizedProfitLoss'] = h[stock]['shares']*(gcp(stock)-h[stock]['price'])\n    return h, tickerList, tempH, buying_power","metadata":{},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"def slope_identifier(cpd):\n    a=(cpd['close'].shift(1).values < cpd['close'].values) & (cpd['close'].shift(1).values < cpd['close'].shift(2).values)\n    e=(cpd['close'].shift(1).values > cpd['close'].values) & (cpd['close'].shift(1).values > cpd['close'].shift(2).values)\n    e = cpd.close.where(e).dropna()\n    b=cpd.close.where(a).dropna()\n    b=pd.concat([b,e])\n    def data_splicer(cpd,b,i): \n        if i+1 < len(b): return cpd.close[(cpd.index>b.index[i])&(cpd.index<b.index[i+1])]\n        else: return cpd.close[(cpd.index>b.index[i])&(cpd.index<b.index[-1])]\n    def slope_extractor(cpd,order=1): return np.polyfit((cpd.index-cpd.index.normalize()).total_seconds(),cpd.values,order)[-2]\n    c=[data_splicer(cpd,b,i) for i in range(len(b))]\n    #d=[slope_extractor(c[i]) for i in range(len(c)) if len(c[i]) >= 3]\n    for i in range(len(c)): \n        if len(c[i]) >= 3: cpd.loc[c[i].index,'closeSlope'] = slope_extractor(c[i])\n    cpd.closeSlope.fillna(0,inplace=True)\n    return cpd","metadata":{},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"def analysis_appender(cpd):\n    stats = {}\n    for i in cpd.index:\n        quote = pwb.get_quote(i)\n        analysis = pwb.get_analysis(i)\n        if str('avgVol10D') in quote:\n            cpd.loc[i, 'avgVol10D'] = float(quote['avgVol10D'])\n        if str('avgVol3M') in quote:\n            cpd.loc[i, 'avgVol3M'] = float(quote['avgVol3M'])\n        if str('fiftyTwoWkHigh') in quote:\n            cpd.loc[i, 'fiftyTwoWkHigh'] = float(quote['fiftyTwoWkHigh'])\n        if str('outstandingShares') in quote:\n            cpd.loc[i, 'outstandingShares'] = float(quote['outstandingShares'])\n        if str('marketValue') in quote:\n            cpd.loc[i, 'marketValue'] = float(quote['marketValue'])\n        if str('totalShares') in quote:\n            cpd.loc[i, 'totalShares'] = float(quote['totalShares'])\n        if str('turnoverRate') in quote:\n            cpd.loc[i, 'turnoverRate'] = float(quote['turnoverRate'])\n        if str('change') in quote:\n            cpd.loc[i, 'change'] = float(quote['change'])\n        if str('changeRatio') in quote:\n            cpd.loc[i, 'changeRatio'] = float(quote['changeRatio'])\n        if str('volume') in quote:\n            cpd.loc[i, 'volume'] = float(quote['volume'])\n        if str('ratingAnalysisTotals') in analysis:\n            cpd.loc[i, 'ratingAnalysisTotals'] = analysis['rating']['ratingAnalysisTotals']\n        if str('ratingAnalysis') in analysis:\n            cpd.loc[i, 'ratingAnalysis'] = analysis['rating']['ratingAnalysis']\n        if str('hold') in analysis:\n            cpd.loc[i, 'hold'] = analysis['rating']['ratingSpread']['hold']\n        if str('strongBuy') in analysis:\n            cpd.loc[i, 'strongBuy'] = analysis['rating']['ratingSpread']['strongBuy']\n        if str('sell') in analysis:\n            cpd.loc[i, 'sell'] = analysis['rating']['ratingSpread']['sell']\n        if str('buy') in analysis:\n            cpd.loc[i, 'buy'] = analysis['rating']['ratingSpread']['buy']\n        if str('underPerform') in analysis:\n            cpd.loc[i, 'underPerform'] = analysis['rating']['ratingSpread']['underPerform']            \nif today in schedule.index:\n    ticker_data = pwb.active_gainer_loser(rank_type='preMarket',count=150)\n    data_list = ticker_data['data']\n    ticker_list = []\n    for ticker in data_list:\n        ticker_list.append(ticker['ticker']['symbol'])\n    ticker_list = np.array(ticker_list).tolist() \n    s = pd.DataFrame(index=ticker_list)\n    s = s.rename_axis('Symbols',axis='columns')\n    analysis_appender(s)\n    s = s[(s.volume > s.avgVol10D) &\n          (s.volume > s.avgVol3M) & \n          (s.totalShares > s.outstandingShares)]\n    ticker_list = list(s.index.array) \n    ticker_array = ticker_list.copy()","metadata":{},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"def strategy_decider(cpd, h):\n    condition={}\n    if (cpd[\"MACD\"][-1] > cpd[\"MACD_Signal\"][-1] and\n        cpd[\"MACD\"][-1-1] < cpd[\"MACD_Signal\"][-1-1] and\n        gpcp(stock) > cpd.close[-3]):\n        condition[0] = 'buy'\n    elif (cpd[\"MACD\"][-1] < cpd[\"MACD_Signal\"][-1] and\n          cpd[\"MACD\"][-1-1] > cpd[\"MACD_Signal\"][-1-1] ):\n        condition[0] = 'sell'\n\n    if (cpd[\"RSI_21\"].pct_change()[-1] > 0\n       and cpd[\"RSI_21\"].pct_change()[-1-1] < 0\n       and cpd[\"RSI_21\"][-1] > cpd[\"RSI_55\"][-1]\n       and cpd[\"RSI_21\"][-1] > cpd[\"RSI_100\"][-1]\n       ):\n        condition[1] = 'buy'\n    elif (cpd[\"RSI_21\"][-1] < cpd[\"RSI_55\"][-1]):\n        condition[1] = 'sell'\n    \n    if (cpd['RSI_100'][-1] < 50 and \n        cpd['RSI_100'].pct_change()[-1] > cpd['RSI_100'].pct_change().mean() and \n        cpd['RSI_100'].pct_change()[-1-1] < cpd['RSI_100'].pct_change().mean() and\n        cpd[\"MACD_Diff\"][-1] > 0 and\n        cpd.volume[-1] > cpd.volume.mean()):\n        condition[2] = 'buy'\n    elif (cpd['RSI_100'][-1] >= 50 and \n          cpd['RSI_100'].pct_change()[-1] < cpd['RSI_100'].pct_change().mean() and \n          cpd['RSI_100'].pct_change()[-1-1] > cpd['RSI_100'].pct_change().mean()):\n        condition[2] = 'sell'\n        \n    if (cpd[\"BB_L\"][-1] > 0 and cpd[\"MACD_Diff\"][-1] > 0 ):\n        condition[3] = 'buy'\n    elif (cpd[\"BB_Upper\"][-1] > cpd[\"BB_Upper\"][-1-1] and\n          cpd[\"BB_Upper\"].pct_change()[-1-1] > 0 and\n          gcp(stock) < cpd[\"BB_Upper\"][-1] and\n          cpd[\"close\"].pct_change()[-1] < 0 and\n          cpd.close.pct_change()[-1-1] >= 0 and\n          gpcp(stock) > cpd[\"BB_Upper\"][-1-1]):\n        condition[3] = 'sell'\n        \n    if (cpd['RSI_21'][-1] < 50 and \n        cpd['RSI_21'].pct_change()[-1] < cpd['RSI_21'].pct_change().mean()\n        and cpd['RSI_21'].pct_change()[-1-1] > cpd['RSI_21'].pct_change().mean() \n        and cpd[\"MACD_Diff\"][-1] > 0):\n        condition[4] = 'buy'\n    elif (cpd['RSI_21'][-1] >= 50 and \n          cpd['RSI_21'].pct_change()[-1] > cpd['RSI_21'].pct_change().mean()):\n        condition[4] = 'sell'\n    \n    if (cpd['RSI_55'][-1] < 50 and \n        cpd['RSI_55'].pct_change()[-1] > cpd['RSI_55'].pct_change().mean() and \n        cpd['RSI_55'].pct_change()[-1-1] < cpd['RSI_55'].pct_change().mean() and\n        cpd[\"MACD_Diff\"][-1] > 0 and\n        cpd.volume[-1] > cpd.volume.mean()):\n        condition[5] = 'buy'\n    elif (cpd['RSI_55'][-1] >= 50 and \n          cpd['RSI_55'].pct_change()[-1] < cpd['RSI_55'].pct_change().mean() and \n          cpd['RSI_55'].pct_change()[-1-1] > cpd['RSI_55'].pct_change().mean()):\n        condition[5] = 'sell'\n        \n    if (cpd[\"MACD_Diff\"][-1] > 0 and\n        cpd[\"MACD\"][-1] < cpd[\"MACD_Signal\"][-1] and\n        cpd[\"MACD\"][-1-1] > cpd[\"MACD_Signal\"][-1-1]):\n        condition[6] = 'buy'\n    elif (cpd[\"MACD\"][-2] > cpd[\"MACD\"][-1] and\n          cpd[\"MACD\"][-2] > cpd[\"MACD\"][-3]):\n        condition[6] = 'buy'\n        \n    if (cpd.close.pct_change()[-1-1] < cpd['close'].pct_change().mean() and\n        cpd.close.pct_change()[-1] > cpd['close'].pct_change().mean() and\n        cpd.close.pct_change()[-1] > 0 and\n        cpd.close[-1] > cpd.close.mean() and\n        cpd.volume[-1] > cpd.volume.mean() and\n        cpd[\"MACD_Diff\"][-1] > 0 and\n        gcp(stock) < cpd.BB_Lower_Mid[-1]):\n        condition[7] = 'buy'\n    elif (cpd.close.pct_change()[-1-1] > cpd['close'].pct_change().mean() and \n          gcp(stock) > cpd.close[-1-2] and\n          gcp(stock) < gpcp(stock) and\n          gcp(stock) > cpd.close[-1-2] and\n          gcp(stock) > cpd.close.mean() ):\n        condition[7] = 'sell'\n        \n    if ('SupreTrend_Direction' in cpd.columns and\n        cpd['SupreTrend_Direction'][-1] == 1 and\n        cpd['SupreTrend_Direction'][-2] == 1 and\n        cpd[\"MACD_Diff\"][-1] > cpd[\"MACD_Diff\"].mean()):\n        condition[8] = 'buy'\n    elif ('SupreTrend_Direction' in cpd.columns and\n          cpd['SupreTrend_Direction'][-2] == 1 and\n          cpd['SupreTrend_Direction'][-1] == 1):\n        condition[8] = 'sell'\n    condition[9] = 'buy' if cpd.closeSlope[-1]<cpd.closeSlope[-2] else 'sell' if cpd.closeSlope[-1]>cpd.closeSlope[-2] else None\n    if (cpd.Close[-1] != np.nan and\n        round(gcp(stock),4) < round(cpd.Close[-1],4) and\n        round(cpd.close[-1],4) < round(cpd.Close[-1],4)):\n        condition[10] = 'buy'\n    elif (cpd.Close[-1] != np.nan and\n          round(cpd.close[-1],4) > round(cpd.Close[-1],4)):\n        condition[10] = 'sell'\n    condition[11] = 'buy' if any(True if cpd[col][-1] < 30 else False for col in [column for column in cpd.columns if column.startswith('RSI_')]) else 'sell'\n    c0=stock in h and gcp(stock) > h[stock]['price'] and 'unrealizedProfitLoss' in h[stock] and h[stock]['unrealizedProfitLoss']>0\n    if ((9 in condition and condition[9]=='sell') or\n        (cpd.BB_U[-1] and c0) or\n        (stock in h and \n         round(cpd.Close[-1],4) < round(h[stock]['stop loss'],4) and \n         round(gcp(stock),4) > round(cpd.Close[-1],4)) or\n        (c0 and cpd.close[-1] < h[stock]['stop loss'])): condition[12] = 'sell'\n    condition = pd.Series(condition,dtype='object')\n    conditioned = [condition[condition=='sell'],condition[condition=='buy']]\n    return conditioned","metadata":{},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"def dataframe(stock):\n    cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 365, extendTrading = 1)\n    if len(cpd) >= 3:\n        #cpd.index = cpd.index.map((convert_to_ctime))\n\n        cpd['RSI_21'] = ta.momentum.rsi(cpd['close'], window=21)\n        cpd['RSI_55'] = ta.momentum.rsi(cpd['close'], window=55)\n        cpd['RSI_100'] = ta.momentum.rsi(cpd['close'], window=100)\n\n        cpd['BB_Upper'] = ta.volatility.BollingerBands(cpd['close']).bollinger_hband()\n        cpd['BB_U'] = ta.volatility.BollingerBands(cpd['close']).bollinger_hband_indicator()\n        cpd['BB_Middle'] = ta.volatility.BollingerBands(cpd['close']).bollinger_mavg()\n        cpd['BB_Lower'] = ta.volatility.BollingerBands(cpd['close']).bollinger_lband()\n        cpd['BB_L'] = ta.volatility.BollingerBands(cpd['close']).bollinger_lband_indicator()\n\n        cpd[\"MACD\"] = ta.trend.macd(cpd['close'],window_slow=50,window_fast=20)\n        cpd[\"MACD_Signal\"] = ta.trend.macd_signal(cpd['close'],window_slow=50,window_fast=20)\n        cpd[\"MACD_Diff\"] = ta.trend.macd_diff(cpd['close'],window_slow=50,window_fast=20)\n\n        temp = pta.supertrend(cpd['high'],cpd['low'],cpd['close'])\n        if len(temp) > 0:\n            for i in temp.columns:\n                if str('SUPERTd_') in str(i):\n                    cpd[\"SupreTrend_Direction\"] = pta.supertrend(cpd['high'],cpd['low'],cpd['close'])[str(i)]\n                    break\n        cpd['BB_Lower_Mid'] = (cpd['BB_Lower'] + cpd['BB_Middle'])/2\n        cpd['BB_Upper_Mid'] = (cpd['BB_Upper'] + cpd['BB_Middle'])/2\n        cpd = slope_identifier(cpd)\n        ydf=Ticker(stock).history(interval='1m', prepost=True,start=cpd.index[-1].strftime('%Y-%m-%d'))\n        if ydf is None: ydf=yf(ticker=stock,interval='1m',prepost=True,start=cpd.index[-1].strftime('%Y-%m-%d'))\n        cpd=pd.concat([cpd,ydf[ydf.index>=cpd.index[-1]]]).sort_index().fillna(method='ffill')\n    return cpd","metadata":{},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"def buy_order(orderId, stock, h, tempH, shares, cpd, condition, trailingstoploss, u):\n    ctime = datetime.now().ctime()\n    if not stock in tempH:  \n        if (current_time >= time(9,30) and current_time < time(16,0)):\n            tempH[stock] = {'stop loss' : gcp(stock)*(1-trailingstoploss),\n                            'bidPrice' : gcp(stock),\n                            'price' : gcp(stock),\n                            'orderId' : getOrderId(orderId),\n                            'bufferTime' : (datetime.now() + timedelta(seconds=10)).time(),\n                            'index' : datetime.now().time(), \n                            'shares' : shares,\n                            'stock' : stock,\n                            'perShare' : shares,\n                            'action' : 'MKT',\n                            'BUY or SELL' : 'BUY',\n                            f'condition {u}' : 'buy'}\n            orderId.append(tempH[stock]['orderId'])\n            print(f'Placed Market Buy Order with {shares} share(s) of {stock} at ${(gcp(stock)):.2f} on {ctime}',\n                  f'\\nUnder condition {u}\\n')\n        else:\n            tempH[stock] = {'stop loss' : gcp(stock)*(1-trailingstoploss),\n                            'bidPrice' : gcp(stock),\n                            'orderId' : getOrderId(orderId),\n                            'index' : datetime.now().time(), \n                            'shares' : shares,\n                            'perShare' : shares,\n                            'shares' : shares,\n                            'action' : 'LMT',\n                            'BUY or SELL' : 'BUY',\n                            f'condition {u}' : 'buy'}\n            print(f'Placed Limit Buy Order with {shares} share(s) of {stock} at ${(gcp(stock)):.2f} on {ctime}',\n                  f'\\nUnder condition {u}\\n')\n\n    elif stock in tempH:\n        #tempH[stock] = h[stock]\n        if (current_time >= time(9,30) and current_time < time(16,0)):\n            tempH[stock]['action'] = 'MKT' \n            tempH[stock]['bufferTime'] = (datetime.now() + timedelta(seconds=10)).time()\n            print(f'Placed Market Buy Order of {shares} more share(s) of {stock} at ${(gcp(stock)):.2f} on {ctime}',\n                  f'\\nUnder condition {u}\\n')\n        else: \n            tempH[stock]['action'] = 'LMT' \n            if str('bufferTime') in tempH[stock]: del tempH[stock]['bufferTime']\n            print(f'Placed Limit Buy Order of {shares} more share(s) of {stock} at ${(gcp(stock)):.2f} on {ctime}',\n                  f'\\nUnder condition {u}\\n')\n        tempH[stock]['bidPrice'] = gcp(stock)\n        tempH[stock]['price'] = gcp(stock)\n        tempH[stock]['orderId'] = getOrderId(orderId)\n        orderId.append(tempH[stock]['orderId'])\n        tempH[stock]['shares'] += shares\n        tempH[stock]['perShare'] = shares\n        tempH[stock]['index'] = datetime.now().time()\n        if not str(f'condition {u}') in tempH[stock]: tempH[stock][f'condition {u}'] = 'buy'\n    return h, tempH","metadata":{},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"def sell_order(current_time, cpd, h, tempH, stock, u=None, condition=None):\n    c2 = stock in tempH and 'takeAction' in tempH[stock] and tempH[stock]['orderId'] == h[stock]['orderId'] and tempH[stock]['BUY or SELL'] == 'SELL' \n    if (not u is None and u < 12):\n        if ((condition[u] == 'sell' and stock in h and gcp(stock) >= h[stock]['price']) and \n            (f'condition {u}' in h[stock] and h[stock][f\"condition {u}\"] == 'buy') and \n            (order_parser(stock,tempH) == True or (stock in tempH and c2 and tempH[stock]['takeAction'] != 1))):\n            if not stock in tempH:\n                tempH[stock] = h[stock].copy()\n                tempH[stock]['BUY or SELL'] = 'SELL'\n            if current_time >= time(9,30) and current_time <= time(16,0): \n                tempH[stock]['action'] = 'MKT'\n                tempH[stock]['bufferTime'] = (datetime.now() + timedelta(seconds=10)).time()\n            else:\n                tempH[stock]['action'] = 'LMT'\n                tempH[stock]['askPrice'] = gcp(stock)\n            tempH[stock]['index'] = datetime.now().time()\n            tempH[stock][f'condition {u}'] = 'sell'\n            tempH[stock]['takeAction'] = 1\n    else:\n        if (u == 12 and (order_parser(stock,tempH) == True or (stock in tempH and c2 and tempH[stock]['takeAction'] != 2))):\n            if not stock in tempH:\n                tempH[stock] = h[stock].copy()\n                tempH[stock]['BUY or SELL'] = 'SELL'\n            if current_time >= time(9,30) and current_time <= time(16,0): \n                tempH[stock]['action'] = 'MKT'\n                tempH[stock]['bufferTime'] = (datetime.now() + timedelta(seconds=10)).time()\n            else:\n                tempH[stock]['action'] = 'LMT'\n                tempH[stock]['askPrice'] = gcp(stock)\n            tempH[stock]['index'] = datetime.now().time()\n            tempH[stock][f'condition {u}'] = 'sell'\n            tempH[stock]['takeAction'] = 2\n\n        if ((current_time >= time(15,0) and current_time < time(15,59)) or\n            (current_time >= time(19,0) and current_time < time(19,59))):\n            if stock in h and gcp(stock) > h[stock]['price'] and (order_parser(stock,tempH) == True or (stock in tempH and c2 and tempH[stock]['takeAction'] != 3)):\n                #if not (stock in tempH and str('takeAction') in tempH[stock] and tempH[stock]['orderId'] == h[stock]['orderId'] and tempH[stock]['BUY or SELL'] == 'SELL'):\n                if not stock in tempH:\n                    tempH[stock] = h[stock].copy()\n                    tempH[stock]['BUY or SELL'] = 'SELL'\n                if current_time >= time(9,30) and current_time <= time(16,0): \n                    tempH[stock]['action'] = 'MKT'\n                    tempH[stock]['bufferTime'] = (datetime.now() + timedelta(seconds=10)).time()\n                else:\n                    quote = pwb.get_quote(stock)\n                    tempH[stock]['action'] = 'LMT'\n                    tempH[stock]['askPrice'] = gcp(stock)\n                tempH[stock]['index'] = datetime.now().time()\n                tempH[stock]['takeAction'] = 3\n\n        if ((current_time >= time(15,58) and current_time < time(16,0)) or (current_time >= time(19,58) and current_time < time(20,0))):\n            if stock in h and (order_parser(stock,tempH) == True or (stock in tempH and c2 and tempH[stock]['takeAction'] != 4)):\n                if not stock in tempH:\n                    tempH[stock] = h[stock].copy()\n                    tempH[stock]['BUY or SELL'] = 'SELL'\n                if current_time >= time(9,30) and current_time <= time(16,0): \n                    tempH[stock]['action'] = 'MKT'\n                    tempH[stock]['bufferTime'] = (datetime.now() + timedelta(seconds=10)).time()\n                else:\n                    quote = pwb.get_quote(stock)\n                    tempH[stock]['action'] = 'LMT'\n                    tempH[stock]['askPrice'] = gcp(stock)\n                tempH[stock]['index'] = datetime.now().time()\n                tempH[stock]['takeAction'] = 4\n    return tempH","metadata":{},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"def background_Trader(stock,h,tempH,buying_power, total_real_profit, profit, made_profit, orderId,tickerList):\n    current_time=datetime.now().time()\n    h, tickerList, tempH, buying_power = updateToHoldings(tempH,tickerList,h,buying_power,trailingstoploss)\n    tempH, buying_power, tickerList = updatePosition(tempH, tickerList, buying_power)\n    h, tempH, buying_power, total_real_profit, profit, made_profit = updateToMKTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit)\n    h, tempH, buying_power, total_real_profit, profit, made_profit = updateToLMTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit)\n    if (gcp(stock) < 1 and gcp(stock) > 0): shares = 100\n    elif (int((buying_power // gcp(stock))*0.02) >= 1 and int((buying_power // gcp(stock))*0.02) <= 10): shares = int((buying_power // gcp(stock))*0.02)\n    else: shares = 1\n    canBuy=buying_power>=shares*gcp(stock)\n    if canBuy or stock in h: \n        cpd = dataframe(stock)\n        condition = strategy_decider(cpd, h)\n        for sub in condition:\n            for i in sub.index:\n                if i in sub.index and sub[i] == 'sell' and stock in h: tempH=sell_order(current_time, cpd, h, tempH, stock, i, sub)\n                if i in sub.index and sub[i] == 'buy' and canBuy and not isBeforeClosing(): \n                    sub=canTradeIn(cpd,stock,sub)\n                    h, tempH=buy_order(orderId, stock, h, tempH, shares, cpd, sub, trailingstoploss, i)\n        if stock in h: sell_order(current_time, cpd, h, tempH, stock)\n    if (stock in h and \n        'unrealizedProfitLoss' in h[stock] and\n        h[stock]['unrealizedProfitLoss'] > 0 and\n        h[stock]['price'] < gop(stock)*(1-trailingstoploss) and\n        gop(stock)*(1-trailingstoploss) > h[stock]['stop loss']):\n        h[stock]['stop loss'] = gop(stock)*(1-trailingstoploss)\n        print(f\"Stop loss update for {stock} is successful at open\\n\")\n    if (stock in h and \n        'unrealizedProfitLoss' in h[stock] and\n        h[stock]['unrealizedProfitLoss'] > 0 and\n        h[stock]['price'] < gcp(stock)*(1-trailingstoploss) and\n        gcp(stock)*(1-trailingstoploss) > h[stock]['stop loss']):\n        h[stock]['stop loss'] = gcp(stock)*(1-trailingstoploss)\n        print(f\"Stop loss update for {stock} is successful at close\\n\")\n    if (stock in h and \n        'unrealizedProfitLoss' in h[stock] and\n        h[stock]['unrealizedProfitLoss'] > 0 and\n        h[stock]['price'] < ghp(stock)*(1-trailingstoploss) and\n        ghp(stock)*(1-trailingstoploss) > h[stock]['stop loss']):\n        h[stock]['stop loss'] = ghp(stock)*(1-trailingstoploss)\n        print(f\"Stop loss update for {stock} is successful at high\\n\")\n    return h, tempH, buying_power, total_real_profit, profit, made_profit, tickerList","metadata":{},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"def canTradeIn(cpd,stock,condition):\n    intervals = [('d1',3),('m60',3),('m1',3)]\n    wds = [pwb.get_bars(stock = stock, \n                        interval = intervals[i][0], \n                        count = intervals[i][1], extendTrading = 1).close for i in range(len(intervals))]\n    wds.append(cpd.close)\n    slopes = [np.polyfit(wds[i].reset_index().index+1,wds[i].values,1)[0] for i in range(len(wds))]\n    positiveSlope = all(True if x>0 else False for x in slopes)\n    quote=pwb.get_quote(stock)\n    keys=['eps','pe','epsTtm','change','peTtm']\n    trend=np.array([float(quote[key]) for key in keys if key in quote])\n    positiveTrend=len(trend[trend>0])>=3\n    strat={}\n    strat[1] = cpd.vwap[-1]>cpd.vwap.mean()\n    strat[2] = cpd.vwap.pct_change()[-1]>cpd.vwap.pct_change().mean()\n    strat[3] = any(True if cpd[col][-1] < 30 else False for col in [column for column in cpd.columns if column.startswith('RSI_')])\n    strat[4] = cpd.BB_L[-1] \n    strat[5] = cpd.MACD_Diff[-1] > 0 and cpd.MACD[-1] > cpd.MACD_Signal[-1]\n    strat[5] = strat[5] or (not strat[5] and (cpd.MACD_Diff[-1] > 0 or cpd.MACD[-1] > cpd.MACD_Signal[-1]))\n    strat[6] = cpd.volume[-1]>cpd.volume.mean()\n    strat[7] = cpd.volume.pct_change()[-1]>cpd.volume.pct_change().mean()\n    strat[8] = cpd.RSI_21[-1] > cpd.RSI_55[-1] and cpd.RSI_21[-1]<50 and cpd.RSI_55[-1] > cpd.RSI_100[-1]\n    strat[9] = positiveSlope or positiveTrend\n    strat[10] = cpd.Close[-1] > cpd.close[-1]\n    strat[11] = cpd.SupreTrend_Direction[-1] == 1\n    strat=pd.Series(strat,dtype='object')\n    c0=gcp(stock) < cpd.BB_Middle[-1]\n    c1=gcp(stock) < cpd.BB_Lower_Mid[-1]\n    goStrong=positiveTrend and positiveSlope\n    for i in condition.index:\n        if not i in range(10,12):\n            if not (((c0 or c1) and strat[9] and len(strat[strat==True])>=4) or goStrong): condition.drop(i,inplace=True)\n        elif i == 11 and not (strat[9] or goStrong): condition.drop(i,inplace=True)\n    return condition","metadata":{},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"def print_holdings(h,tempH):\n    if len(h)> 0: \n        print('Active orders : ') \n        display(pd.DataFrame(h))\n    if len(tempH)> 0: \n        print('Current pending orders : ')\n        display(pd.DataFrame(tempH))\n    if len(Positions)> 0: \n        print('Current Limit Order Positions :')\n        show = dict()\n        for i in range(len(Positions)): show.update(dict(Positions[i].items()).items())\n        display(pd.DataFrame(show))\n    if len(orderHistory)> 0: \n        print('Current Order History :')\n        show = dict()\n        for i in range(len(orderHistory)): show.update(dict(orderHistory[i].items()).items())\n        display(pd.DataFrame(show))","metadata":{},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"#Regular Stock Trading\ncurrent_time = datetime.now().time()\ncurrent_datetime = datetime.combine(datetime.today(), current_time)\nformatted_datetime = current_datetime.strftime('%Y-%m-%d')\ntrailingstoploss = 0.025\nwhile (today in schedule.index):\n    if datetime.now().time()>=time(4,30) and datetime.now().time()<=market_close:\n        tickerList=ticker_list.copy()\n        for stock in tickerList:\n            if (not MKT() and not LMT()) or (len(h) == 0 and datetime.now().time() >= time(19,0)): break\n            current_time = datetime.now().time()\n            h, ticker_list, tempH, buying_power = updateToHoldings(tempH,ticker_list,h,buying_power,trailingstoploss)\n            tempH, buying_power, ticker_list = updatePosition(tempH, ticker_list, buying_power)\n            h, tempH, buying_power, total_real_profit, profit, made_profit = updateToMKTsellHoldings(tempH,\n                                                                                                     h,\n                                                                                                     buying_power,\n                                                                                                     total_real_profit,\n                                                                                                     profit,\n                                                                                                     made_profit)\n            h, tempH, buying_power, total_real_profit, profit, made_profit = updateToLMTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit)\n            heldStockList =list(h.keys())\n            for ticker in heldStockList:\n                price = gcp(ticker)\n                yTime=getYahooData(ticker).index[-1]\n                if (not ticker in holdings and yTime!=pd.to_datetime(np.nan)) or (ticker in holdings and \n                                                                                  not holdings[ticker]['updated'] and \n                                                                                  (yTime>holdings[ticker]['time'] or \n                                                                                   ('price' in holdings[ticker] and\n                                                                                    price!=holdings[ticker]['price']))): \n                    holdings[ticker]={'updated':True,'time':yTime, 'price':price}\n                    h, tempH, buying_power, total_real_profit, profit, made_profit, ticker_list = background_Trader(ticker, \n                                                                                                                   h, \n                                                                                                                   tempH, \n                                                                                                                   buying_power, \n                                                                                                                   total_real_profit, \n                                                                                                                   profit, \n                                                                                                                   made_profit,\n                                                                                                                   orderId,\n                                                                                                                   ticker_list)\n                    holdings[ticker]['updated']=False\n            price = gcp(stock)\n            yTime=getYahooData(stock).index[-1]\n            if (not stock in holdings) or (stock in holdings and \n                                           not holdings[stock]['updated'] and \n                                           (yTime>holdings[stock]['time'] or \n                                            ('price' in holdings[stock] and\n                                             price!=holdings[stock]['price']))): \n                holdings[stock]={'updated':True,'time':yTime,'price':price}\n                if not isBeforeClosing():\n                    h, tempH, buying_power, total_real_profit, profit, made_profit, ticker_list = background_Trader(stock, \n                                                                                                                   h, \n                                                                                                                   tempH, \n                                                                                                                   buying_power, \n                                                                                                                   total_real_profit, \n                                                                                                                   profit, \n                                                                                                                   made_profit,\n                                                                                                                   orderId,\n                                                                                                                   ticker_list)\n                holdings[stock]['updated']=False\n        print_holdings(h,tempH)\n\n    if (not MKT() and not LMT() and datetime.now().time()>time(4,30)) or (len(h) == 0 and datetime.now().time() >= time(19,0)):\n        unrealizedProfitLoss = 0\n        if len(h) > 0:\n            lista = list(h.keys())\n            for stock in lista:\n                if str('unrealizedProfitLoss') in h[stock]:\n                    unrealizedProfitLoss += h[stock]['unrealizedProfitLoss']\n        print(\"\\n\")\n        print(f'Total Market Value: ${(originalBuyingPower + unrealizedProfitLoss + total_real_profit):.2f}')\n        print(f'Remaining Balance: ${buying_power:.2f}')\n        print(f'Total Real Profits: ${(total_real_profit):.2f}')\n        print(f'Total Paper Profits: ${(unrealizedProfitLoss):.2f}')\n        print(f'Total Profits: ${(total_real_profit + unrealizedProfitLoss):.2f}')\n        print(f'Total Positive Profits: ${made_profit:.2f}')\n        if ((total_real_profit + unrealizedProfitLoss) - made_profit) < 0 and unrealizedProfitLoss < 0:\n            print(f'Total Negative Profits: ${((total_real_profit + unrealizedProfitLoss) - made_profit):.2f}')\n        elif (total_real_profit - (made_profit + unrealizedProfitLoss)) < 0 and unrealizedProfitLoss > 0:\n            print(f'Total Negative Profits: ${(total_real_profit - (made_profit + unrealizedProfitLoss)):.2f}')\n        if unrealizedProfitLoss > 0:\n            print(f'Success Rate: {(made_profit + unrealizedProfitLoss)/abs(total_real_profit + unrealizedProfitLoss):.2f}%')\n        elif unrealizedProfitLoss == 0 and total_real_profit != 0:\n            print(f'Success Rate: {made_profit/abs(total_real_profit)}%')\n        print(ticker_array)\n        break","metadata":{"scrolled":true},"execution_count":40,"outputs":[{"ename":"KeyError","evalue":"'MTC'","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[1;32mIn[40], line 13\u001b[0m\n\u001b[0;32m     11\u001b[0m current_time \u001b[38;5;241m=\u001b[39m datetime\u001b[38;5;241m.\u001b[39mnow()\u001b[38;5;241m.\u001b[39mtime()\n\u001b[0;32m     12\u001b[0m h, ticker_list, tempH, buying_power \u001b[38;5;241m=\u001b[39m updateToHoldings(tempH,ticker_list,h,buying_power,trailingstoploss)\n\u001b[1;32m---> 13\u001b[0m tempH, buying_power, ticker_list \u001b[38;5;241m=\u001b[39m updatePosition(tempH, ticker_list, buying_power)\n\u001b[0;32m     14\u001b[0m h, tempH, buying_power, total_real_profit, profit, made_profit \u001b[38;5;241m=\u001b[39m updateToMKTsellHoldings(tempH,\n\u001b[0;32m     15\u001b[0m                                                                                          h,\n\u001b[0;32m     16\u001b[0m                                                                                          buying_power,\n\u001b[0;32m     17\u001b[0m                                                                                          total_real_profit,\n\u001b[0;32m     18\u001b[0m                                                                                          profit,\n\u001b[0;32m     19\u001b[0m                                                                                          made_profit)\n\u001b[0;32m     20\u001b[0m h, tempH, buying_power, total_real_profit, profit, made_profit \u001b[38;5;241m=\u001b[39m updateToLMTsellHoldings(tempH,h,buying_power,total_real_profit,profit,made_profit)\n","Cell \u001b[1;32mIn[27], line 13\u001b[0m, in \u001b[0;36mupdatePosition\u001b[1;34m(tempH, tickerList, buying_power)\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m MKT(tempH[stock][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mindex\u001b[39m\u001b[38;5;124m'\u001b[39m]) \u001b[38;5;129;01mand\u001b[39;00m LMT(): \u001b[38;5;28;01mdel\u001b[39;00m tempH[stock]\n\u001b[0;32m      8\u001b[0m \u001b[38;5;66;03m#cpd = pwb.get_bars(stock = stock, interval = 'm1', count = 2, extendTrading = 1)\u001b[39;00m\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m#if len(cpd) > 0:\u001b[39;00m\n\u001b[0;32m     10\u001b[0m \u001b[38;5;66;03m#if stock in tempH and 'askPrice' in tempH[stock]: \u001b[39;00m\n\u001b[0;32m     11\u001b[0m \u001b[38;5;66;03m#    print(f\"askPrice : {tempH[stock]['askPrice']:.2f}\")\u001b[39;00m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m#    print(f\"currentPrice: ${gcp(stock)]:.2f}\")\u001b[39;00m\n\u001b[1;32m---> 13\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (tempH[stock][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maction\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mLMT\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \n\u001b[0;32m     14\u001b[0m     tempH[stock][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBUY or SELL\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mBUY\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \n\u001b[0;32m     15\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbidPrice\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01min\u001b[39;00m tempH[stock] \u001b[38;5;129;01mand\u001b[39;00m \n\u001b[0;32m     16\u001b[0m     gcp(stock) \u001b[38;5;241m>\u001b[39m tempH[stock][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbidPrice\u001b[39m\u001b[38;5;124m'\u001b[39m]):\n\u001b[0;32m     17\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m buying_power \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m tempH[stock][\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mshares\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m*\u001b[39mgcp(stock):\n\u001b[0;32m     18\u001b[0m         position[stock] \u001b[38;5;241m=\u001b[39m tempH[stock]\u001b[38;5;241m.\u001b[39mcopy()\n","\u001b[1;31mKeyError\u001b[0m: 'MTC'"]}]},{"cell_type":"raw","source":"def slope_identifier(data):\n    local_minima = pd.DataFrame(columns=data.columns)\n    local_maxima = pd.DataFrame(columns=data.columns)\n    data.loc[:,'close_slope'] = 0\n    data.loc[:,'close_slope_minima'] = 0\n    data.loc[:,'close_slope_maxima'] = 0\n    data.loc[:,'close_slope_mean'] = 0\n    slope = 0\n    \n    start_index = 0\n    min_idx = 0\n    max_idx = 0\n    \n    local_minima = argrelextrema(data['close'].values, np.greater, order=7)[0]\n    local_maxima = argrelextrema(data['close'].values, np.less, order=7)[0]\n    for i in range(3,len(data)):\n        if (i == local_minima).any():\n            min_idx = i\n            start_index = min_idx\n        elif (i == local_maxima).any():\n            max_idx = i\n            start_index = max_idx\n        \n        if i != start_index and start_index == min_idx:\n            slope = (data['close'][i] - data['close'][start_index]) / (i - start_index)\n            data.loc[data.index[i],'close_slope_minima'] = slope\n        elif i != start_index and start_index == max_idx:\n            slope = (data['close'][i] - data['close'][start_index]) / (i - start_index)\n            data.loc[data.index[i],'close_slope_maxima'] = slope\n        \n        x = np.arange(len(data[:i]))\n        y = data['close'][:i].values\n        slope, _, _, _, _ = linregress(x, y)\n        data.loc[data.index[i],'close_slope'] = slope\n    \n    for i in range(len(data)):\n        data.loc[data.index[i],'close_slope_mean'] = data['close_slope'][:i].mean()\n    \n    return data","metadata":{}}]}