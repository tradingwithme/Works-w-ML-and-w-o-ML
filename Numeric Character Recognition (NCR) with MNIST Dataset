{"metadata":{"colab":{"provenance":[],"mount_file_id":"1cas6cqxPilV4PXN6HKObp5hfBGYqBwE_","authorship_tag":"ABX9TyPrEBI0DgXn0HULQFReyM4r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Numeric Character Recognition (NCR) with MNIST Dataset\n\n## Introduction\n\nIn this project, we'll implement a Numeric Character Recognition (NCR) algorithm using the MNIST dataset. MNIST (\"Modified National Institute of Standards and Technology\") is a classic dataset of handwritten images widely used for benchmarking classification algorithms.\n\nThe goal of this project is to correctly identify digits from a dataset of tens of thousands of handwritten images. We'll use a convolutional neural network (CNN) model to achieve this task.\n\n## Python Script Overview\n\nThe Python script contains the implementation of the NCR algorithm using TensorFlow and Keras. Here's an overview of the script:\n\n1. **Loading and Preprocessing the Data**: The MNIST dataset is loaded and preprocessed. The data is normalized and split into training and validation sets.\n\n2. **Building the Neural Network Model**: A CNN model is constructed using the Keras API. The model architecture consists of convolutional layers followed by max-pooling layers and fully connected layers.\n\n3. **Training the Model**: The constructed model is trained on the training data. Training is performed using the Adam optimizer and sparse categorical crossentropy loss.\n\n4. **Model Evaluation**: The trained model is evaluated on the validation set to assess its performance. The accuracy metric is used to measure the model's performance.\n\n5. **Making Predictions**: Once trained, the model is used to make predictions on the test data. The predicted labels are saved to a CSV file in the required submission format.\n\n## Usage\n\nTo run this Python script, follow these steps:\n\n1. Ensure you have TensorFlow and Keras installed in your environment.\n\n2. Execute the script in your Python environment.\n\nThe script will load the MNIST dataset, train the neural network model, evaluate its performance, make predictions on the test data, and save the predictions to a CSV file.\n","metadata":{"id":"zFkGV9F8KmW1"}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom os import chdir, listdir\nfrom skimage.io import imread\nfrom tensorflow.keras import layers, models\nfrom sklearn.model_selection import train_test_split","metadata":{"id":"5qloLfi-Hoof"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Loading and Preprocessing the Data\n\nIn this segment, we load the MNIST dataset and preprocess it for training the neural network model. The data is normalized to a range of [0, 1] and split into training and validation sets.\n","metadata":{"id":"6byeP2xPLYmU"}},{"cell_type":"code","source":"# Load MNIST dataset\nmnist_train = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/train.csv')\nmnist_test = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/test.csv')","metadata":{"id":"rRSxfQ_oHrdd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Building the Neural Network Model\n\nIn this segment, we define the architecture of the neural network model using the Keras API. The model consists of convolutional layers followed by max-pooling layers and fully connected layers.\n","metadata":{"id":"rHlUmF5nLc_6"}},{"cell_type":"code","source":"# Preprocess the data\nX_train = mnist_train.drop('label', axis=1).values.reshape(-1, 28, 28, 1) / 255.0\ny_train = mnist_train['label'].values\nX_test = mnist_test.values.reshape(-1, 28, 28, 1) / 255.0\n\n# Split data into train and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)\n\n# Define the neural network model\nmodel = models.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D((2, 2)),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.Flatten(),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","metadata":{"id":"SEEXZNZIHtIE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Training the Model\n\nThis segment involves training the constructed neural network model on the training data. The training process utilizes the Adam optimizer and sparse categorical crossentropy loss function.\n","metadata":{"id":"cyUxARFJL2X6"}},{"cell_type":"code","source":"# Train the model\nhistory = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"280Px-DxFuex","executionInfo":{"status":"ok","timestamp":1711832110830,"user_tz":240,"elapsed":326904,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"8b7ccfe8-c022-460d-f211-9de9630bccef"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":"Epoch 1/10\n\n1182/1182 [==============================] - 35s 28ms/step - loss: 0.1882 - accuracy: 0.9419 - val_loss: 0.0724 - val_accuracy: 0.9781\n\nEpoch 2/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0575 - accuracy: 0.9822 - val_loss: 0.0568 - val_accuracy: 0.9812\n\nEpoch 3/10\n\n1182/1182 [==============================] - 34s 29ms/step - loss: 0.0407 - accuracy: 0.9871 - val_loss: 0.0427 - val_accuracy: 0.9879\n\nEpoch 4/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0293 - accuracy: 0.9905 - val_loss: 0.0367 - val_accuracy: 0.9888\n\nEpoch 5/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0253 - accuracy: 0.9924 - val_loss: 0.0392 - val_accuracy: 0.9883\n\nEpoch 6/10\n\n1182/1182 [==============================] - 33s 28ms/step - loss: 0.0198 - accuracy: 0.9936 - val_loss: 0.0431 - val_accuracy: 0.9883\n\nEpoch 7/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0166 - accuracy: 0.9947 - val_loss: 0.0365 - val_accuracy: 0.9886\n\nEpoch 8/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0156 - accuracy: 0.9952 - val_loss: 0.0390 - val_accuracy: 0.9871\n\nEpoch 9/10\n\n1182/1182 [==============================] - 32s 27ms/step - loss: 0.0110 - accuracy: 0.9962 - val_loss: 0.0520 - val_accuracy: 0.9869\n\nEpoch 10/10\n\n1182/1182 [==============================] - 33s 28ms/step - loss: 0.0113 - accuracy: 0.9965 - val_loss: 0.0429 - val_accuracy: 0.9886\n"}]},{"cell_type":"markdown","source":"#### Model Evaluation\n\nAfter training, we evaluate the performance of the trained model on the validation set. The accuracy metric is used to assess the model's performance in digit recognition.\n","metadata":{"id":"sWKWNbryL77e"}},{"cell_type":"code","source":"# Evaluate the model\ntest_loss, test_acc = model.evaluate(X_val, y_val)\nprint(f\"Test accuracy: {test_acc:,.2%}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PmxbLh-rL-P0","executionInfo":{"status":"ok","timestamp":1711832833786,"user_tz":240,"elapsed":1514,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"e57ce04c-2848-4b86-c854-5cca6315058d"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":"132/132 [==============================] - 1s 8ms/step - loss: 0.0429 - accuracy: 0.9886\n\nTest accuracy: 98.86%\n"}]},{"cell_type":"markdown","source":"#### Making Predictions\n\nOnce the model is trained and evaluated, it is used to make predictions on the test data. The predicted labels are then saved to a CSV file in the required submission format.\n","metadata":{"id":"VYPVjj-1MIqi"}},{"cell_type":"code","source":"# Make predictions\npredictions = model.predict(X_test)\npredicted_labels = np.argmax(predictions, axis=1)\n\n# Save predictions to CSV\nsubmission_df = pd.DataFrame({'ImageId': range(1, len(predicted_labels) + 1), 'Label': predicted_labels})\nsubmission_df.to_csv('/content/drive/MyDrive/Colab Notebooks/submission.csv', index=False)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-unRPUxfIC5E","executionInfo":{"status":"ok","timestamp":1711832991330,"user_tz":240,"elapsed":9170,"user":{"displayName":"Michael Ojeranti","userId":"02085433796322722475"}},"outputId":"c5c31a8e-efd8-4998-c8f9-0809279dc564"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":"875/875 [==============================] - 8s 10ms/step\n"}]},{"cell_type":"markdown","source":"This project demonstrates the implementation of a Numeric Character Recognition algorithm using the MNIST dataset and convolutional neural networks. By training on handwritten digit images, the model learns to recognize digits accurately, showcasing the fundamentals of computer vision and deep learning techniques.","metadata":{"id":"8M2qnDP1LCQC"}}]}